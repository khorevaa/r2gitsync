// Code generated for package manager by go-bindata DO NOT EDIT. (@generated)
// sources:
// bin/tempExtension.cfe
package manager

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tempextensionCfe = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x97\x67\x50\x93\xd9\xdb\xc6\x8f\x84\x4e\x40\x85\x20\x55\x08\x08\x48\x31\x12\x5a\x12\x90\x8e\x34\xa5\x8b\x80\x02\x49\x20\x54\x81\xd0\x04\x96\x1e\x50\x50\x9a\x20\xa8\xa8\x8b\x20\x42\x14\x41\x08\xbd\x37\x69\x12\x31\x60\x41\x8a\x4a\x54\x7a\x11\x41\xa4\x09\x08\xef\xfc\x61\xd6\xd9\x9d\xd9\x99\x77\xe6\xfd\xb2\xef\xfc\x67\x7f\x1f\x9e\xfb\x9a\xe7\x79\xce\xb9\x3f\x9c\x6b\xe6\xba\xcf\xce\xce\x4e\x34\x60\x00\x00\x02\xf6\xe0\x64\x47\xee\xa2\xa8\x0c\xdf\xab\x48\x24\x1c\xed\xb6\x07\x9c\x93\x5d\x9e\x01\x80\x12\x06\x00\xfe\xb3\x8c\xc4\x06\xc0\x0e\xdb\x9e\x16\x81\x02\xe0\x09\xdd\xd3\xe0\x5f\xfe\x6b\xf9\xc3\x1e\x28\x24\xfc\x97\xf8\x93\x3d\xee\xdf\xe5\xec\xd5\xd2\x63\x00\x7f\xd4\xff\xe0\x0c\x54\x80\x13\x70\x02\x48\x80\x06\x28\x40\x00\x08\x40\x00\x0a\x00\x03\xd0\x00\x01\x94\x81\x32\x70\x01\x48\x80\x00\x4e\xc0\x0d\x60\x80\x0a\x40\x00\x55\x40\x00\x48\xa0\xb8\xfb\x45\x19\x28\x00\x17\xa0\x04\x08\x40\xf5\xcf\xed\x51\xce\x4a\xf0\x5f\xe2\x4f\xed\x9b\xec\x4c\x89\x92\x75\x9c\xf4\xfd\xc8\x4c\xbf\xea\x54\x92\xb4\xa5\x78\x15\x4d\x9f\x59\x5c\xf2\x30\x5c\xdb\x06\x02\xa1\x1e\x7f\xd6\x7d\xb0\x5c\x00\x4f\xc2\xa7\xc9\xd5\x9a\xa7\xcb\x8d\x17\x4d\x15\x0e\xce\x53\x2f\x9a\xb3\x10\x3b\x46\xa4\xd7\x87\x6f\x74\x88\xff\xf8\xd9\xbd\xb3\x3d\xd5\x12\xf5\xa2\x66\xa1\x65\xf3\xd5\x1c\xbf\xb1\xbd\x45\xa9\x4c\xc2\x8b\x93\x04\x7b\xb2\x88\x4c\x0f\x2c\x5b\x72\xe3\x7b\xf1\xe1\x5c\x0d\xb7\x09\x58\x46\xfc\x02\x7c\x52\xa6\x9f\xcc\x4a\x96\x78\x3c\xd8\x19\x7a\x45\xc4\x3f\x42\x7d\x36\x72\x6d\x79\x3d\x8b\x38\x23\x25\x68\x15\xa0\x98\xe8\xc8\x6d\x7c\x32\x8f\xee\xfe\xd0\x7a\xf5\xdd\xc8\x86\x11\x59\xe3\x63\x36\x76\x7b\x7b\x29\x75\x7f\xf4\xcf\xc5\x9a\xcc\x1c\xad\xad\x89\x89\x47\x99\x38\x6c\x54\xd4\x8f\x84\x1c\x6c\x48\xd8\xc6\x9b\x9c\x1c\x4d\xbe\x18\xb2\x39\xba\x79\xa6\xb8\xef\x70\x7b\xe4\x19\x21\x35\x23\x6f\xa8\x22\xcd\x24\x70\x90\x3c\x49\xf6\xac\xb4\xaf\xf3\x77\xd4\x3f\x1f\xbc\x34\x6d\x16\xd0\x78\x2e\x27\xf2\x4d\x72\x7f\x20\x5d\xaa\x8a\x6c\xdf\x3c\x43\x7c\xc7\xce\x21\x83\xfe\x82\x2a\x4a\xbb\x69\xe5\x29\x9d\xea\x7c\x56\x23\x10\x5f\xb3\x48\xfd\x7d\x50\x82\x56\x01\xf7\x86\x2d\xdd\x51\xd4\xcf\x50\x0c\x9f\x7f\x1b\xe4\x8c\x26\x7e\x11\xf3\x8f\x8e\x54\x4f\x74\x15\x34\x96\x9d\xbf\x70\x62\xf0\xa6\x7e\x31\xfc\x98\xe0\x36\x8d\xb7\xdb\x43\xa1\xed\xb7\x0c\x25\xac\x5b\xc2\x78\x55\x84\x3d\x87\xc1\x90\xb0\x29\xb4\x2a\xaf\x51\x35\xa3\xd4\xa7\xfc\xe6\xb7\xe9\xaa\x50\x3f\xc1\xe2\x79\xfb\xa8\xed\xed\x86\x0a\x94\xe1\x91\x6c\xad\x4d\x93\x29\xbe\x9f\x5d\x63\x1b\xf5\x4e\x66\x82\xf6\xfc\x9c\xa7\xef\xe5\xdf\xb1\xec\x4b\x1c\x24\x22\x52\xeb\xf3\x13\x06\x28\xef\x67\xe6\x62\xaf\x75\xe0\x76\x70\x81\xcb\x5b\x93\x0d\xbe\xbf\xf5\xa3\x39\xca\xad\x31\x1a\x01\xea\xd8\xd1\x9d\xac\xd6\xb8\xfa\x47\x5a\xf7\xbd\xef\x7a\x9b\xe3\xe1\xea\x87\x8c\xab\xcd\xb0\x95\x16\xaf\x2d\xaf\x24\x52\xde\xfe\xe8\x5a\x13\xf8\x11\xcc\x36\x4e\xe1\x90\x4b\x15\x3f\x2c\xf0\xf1\xbb\x66\x05\x96\xbb\xea\xcb\xf1\xca\x59\x66\x79\xce\xc5\x64\xa7\xfb\x32\x15\x3f\x94\x27\xf9\x93\xfa\x82\xcc\xa3\x23\xda\x42\x0c\xb7\x77\xc6\x02\xa2\x3e\x2e\x6d\x35\x4f\x4c\x44\xf6\x4c\x44\xf6\xcc\x6d\xde\xaa\x59\x43\x0c\xae\x21\x6a\xd6\x10\x0b\xbe\x99\xa2\x27\xc6\x53\x1f\xb4\x69\xa9\xdf\x03\xcd\xfb\xed\xa2\xee\xbd\x2a\x21\xab\x4e\x37\x3e\x63\x4d\x3f\xdb\xfa\x2c\x96\xc7\xed\x5c\xd3\x05\x21\x7a\x67\xaf\xbf\x89\x93\x46\xa5\xfb\xe8\xa1\x89\x34\xea\x29\xfa\xef\x84\x45\xaf\xa5\xb2\xd7\xd3\x41\xd8\xdc\xf0\x84\x20\xbd\x30\x95\xbe\x23\x95\xaf\xa4\x73\x45\xf5\xce\xbe\x3f\x72\xd1\x77\xda\x2a\xcd\x47\x87\x41\x30\x86\x91\x5f\xd4\x3d\x45\x2d\x60\xf2\xf1\xcf\xb6\x83\x9b\x8d\x5e\xeb\x4f\x08\xba\x09\x6a\x19\xe1\x87\x62\x5f\x52\xaa\x6a\x97\x19\xfd\x35\xf5\x8a\x82\xbb\x1d\x72\x59\x3d\x52\x16\x0d\x18\x6c\x62\x6d\xee\x47\xd0\x0d\xe3\xae\x66\xe5\x9e\x83\xd3\x65\x0f\x2c\x60\x93\xf3\xdb\xa4\x87\x2e\xcb\x4a\xdd\x3a\xa6\x57\xa1\x44\x51\xaa\xcc\x3f\x57\x64\xf2\x48\x16\xda\x35\x8c\xd0\x4b\x83\x75\xc5\xe6\xd1\x86\x7a\x2a\x9e\xf1\x16\x9e\x58\x78\xc5\x12\x3a\xb0\xba\x08\x5b\x29\x7e\x84\xd1\x6b\xe8\xab\x13\x7b\x2a\x93\x96\x6b\xcd\x1a\x72\x65\xf9\xf5\x17\x0d\x54\x75\x3c\xe3\x06\x6f\x7d\xa1\x84\x00\x12\x78\x1d\x19\x04\xef\x53\xa8\x26\x87\x6f\x52\x03\xf7\xb3\x96\x6a\xe8\xf2\x12\x99\xad\xb2\xee\x6e\x9b\x71\xe4\xd7\x75\x7c\x39\x15\xae\x08\x8b\x8a\xb1\xba\x92\x6a\xc2\x14\x6a\xea\x73\x78\xd8\xa1\xe1\x79\xb9\xf7\x01\xf7\x53\xf6\x97\x3b\xe4\x4c\x98\xc7\xd2\xae\x37\xdd\x07\xb3\x4a\x25\xec\xd6\x4a\x0a\x57\x8f\xde\xac\xc6\xcb\x7f\xea\xec\x86\xaa\xb3\xd9\x60\x8f\x23\xb9\x3c\xb1\xbc\x2f\x05\xbe\x23\x79\x94\x9d\xad\xd3\xb3\x85\x42\x6f\x9a\x79\x23\x99\x7c\x3e\xbd\x1c\x72\x97\x8e\x30\xee\xd6\x9e\x8a\x81\x48\x90\x6c\xa5\xbc\x3c\xca\x46\x0b\x3e\xa0\x20\x3c\xb6\x25\x03\x85\x0f\xd3\xf9\x1e\xb3\x0b\x53\x9d\xf9\x1b\x47\x2f\xcd\x66\xf9\x0c\x0f\x95\x04\xcf\x87\xa9\xb5\xae\xe8\xb3\x74\xe3\x5c\x0f\x7e\xdd\x4c\x71\x64\x82\xdc\x2e\x18\x8f\xd7\xe4\x1d\xc6\x84\xc9\x38\x5c\xeb\x45\x05\xca\x1d\x9a\x50\x57\xc3\xa7\x5b\x2d\x24\xd5\x62\x56\x3f\x70\x2d\x60\xbc\xc4\x31\x4d\x37\x02\x9e\x3b\x8a\x8e\xf1\xed\x83\x14\x8c\x18\x41\x4e\xc2\x53\x0e\x16\x96\xde\x61\x07\xb5\x61\xd6\xfc\x2d\x4a\x30\xf7\x7c\x7a\xf5\x58\xc8\x0a\x89\x3d\xab\x7f\x88\x04\xe9\x35\x7f\xf0\x9c\xdf\x74\xc7\x88\xdb\x90\x29\xf8\x85\x03\xcb\xac\x8b\x2a\x8e\x17\x63\x91\x76\x8c\x4d\xad\xb7\x71\xf3\xe0\xa0\x08\x77\x44\x18\x2e\x19\x37\xbd\xac\x1b\xe9\x52\x59\x47\x12\x55\x9b\x8c\xe5\x72\xf6\x5f\x55\xd9\xe8\xa7\xf0\xe0\x6f\x67\x87\xb9\x33\x1a\x50\x11\x31\x2c\xa4\x51\x79\xbd\xa3\x2a\xd9\x7e\xad\xd3\x8f\x45\xa4\x5a\xc8\xfa\x4d\xce\x12\x03\xd6\xc9\xfe\x3a\x34\xd3\x12\x0b\xc7\x75\x12\x55\x71\x24\xa2\x8c\xcf\x63\x0a\x3d\x94\xc4\xc1\x47\x4d\xf0\xac\x19\xa7\xe4\xe6\x5c\xe2\x32\x7c\xab\x22\xac\x64\x83\xa4\x88\x17\x5c\xfa\xee\xc0\x78\x34\x49\x14\x1d\x04\xdb\x1a\xbd\x43\xcb\x13\x09\xb9\x3e\x6f\x74\x46\xfd\xf3\x71\x86\xf4\xcb\x72\x5a\xcc\x56\x98\x4c\x96\x37\xb7\x50\x5f\x4a\x17\x0b\x64\x4a\x59\x1b\xdb\x87\x4d\x72\x4a\xa7\x9a\x4f\x95\x5e\xb0\x8d\xc4\x67\x56\x98\x17\x23\xbf\x45\x4d\xeb\x32\x89\x88\xcb\xba\x9a\xd3\x67\xbf\x86\xe7\xcb\xed\xfb\x2d\x72\x30\xaf\xb3\x8e\xb2\xe5\x6a\x50\xaa\xce\xdf\xe3\xef\xdd\x3b\x83\x3f\x9f\x76\xcc\x2e\xd1\xce\x0f\xb6\x5e\x71\xcd\xb0\x84\xbe\x38\x17\x63\x39\x25\xd5\x52\x21\x27\x05\xeb\x7c\x16\x4f\x66\x98\xc3\x71\x69\x10\x65\x5e\x30\x83\xc7\xa2\x46\x3d\x78\x46\x87\xa2\xf2\xb7\x77\x74\xd6\xb2\x37\x79\x05\xed\x5f\x02\x0b\xab\xa7\x29\x13\x82\x99\x95\x1f\xcd\xbe\x7a\x49\x1b\x0d\xa4\x3f\xb0\x7c\xb9\x1f\x26\x97\xdb\x60\x53\x77\x66\xc6\x90\x07\xf5\x55\x26\x5d\xb4\x00\x13\x53\x76\x4a\xa9\x00\x72\x46\x70\xed\x60\xcf\xbe\x7a\x96\xa2\x15\xc7\xfc\xe0\xe1\x91\xc8\x88\x00\x01\x75\x4b\x05\xe6\x45\x8f\xc4\x10\xbd\xf7\x4f\x3d\x92\x7f\x17\xc4\xf2\x04\x8c\x48\x09\xd5\xdc\x2b\xbf\xb7\x11\x91\x6c\x50\x46\xe6\xf0\xb6\x82\x9b\x6b\xc3\xe9\xed\xda\x67\x5d\xf0\xa7\x70\x9f\x55\x8b\x9f\xc1\x68\x55\x6e\x21\x27\x12\x07\xb4\xf9\x84\xb2\x24\xd3\x62\xba\x6b\x79\xf4\x75\x7c\xbe\x72\x2f\xb3\x95\xfa\xf7\xa5\x67\xb7\x6a\x5c\x8f\x89\xfe\x90\xc0\xd6\x01\x52\x8a\x78\xc5\xc7\x68\x5e\xdf\x70\x84\xf3\x35\xb7\x88\x02\x9f\xe6\xc2\x3e\x34\xb3\xc3\x98\x75\xd9\x87\x39\x5e\x42\x1e\x5e\x78\x62\x5e\x2e\x4f\x55\x95\x54\xe6\x31\xd5\x59\x65\xdf\x4a\x89\xab\x8e\xb7\x87\x0a\xe1\xdb\x82\x4d\xe7\x0c\x36\x1e\xb6\x17\x50\x19\x5e\x0d\x4e\x58\x70\x61\x18\xe5\x09\xb4\x7d\x46\xf9\x64\xdf\x72\x4a\xb2\x64\x90\x60\xb1\xd8\xa7\xb2\x7e\x7c\x38\x14\x46\xa8\xb3\x1d\xb8\x8b\x77\x1f\x88\xb6\x15\xf5\xa1\x63\xd3\x2d\x8c\xaf\xdc\x67\xc2\x0c\xcd\xf9\xfb\xd2\xba\x6a\x15\x2e\x37\xac\x1f\xfd\x41\x89\xf7\x92\x27\xb5\xeb\xeb\x0c\x34\x89\xfb\x7d\x1e\x85\x0a\x87\x33\x89\xe6\x41\x56\x9e\x6b\xb9\xc5\x80\x4b\x4f\xe6\x2c\x4d\xf4\x4c\xeb\xf5\xb6\x6d\x4c\x58\x7c\x51\x19\x4f\x7d\x97\x70\xb4\xa1\xa5\xdc\xe8\xba\x69\x7f\x39\x66\x73\xd4\x48\xff\x99\x45\x59\xfd\x57\x88\x9f\x41\x2b\x9f\x91\xe7\xb1\x0c\xae\x88\x45\x57\x2b\xb1\x04\x42\xeb\x45\x10\xc4\xa4\xdd\xae\xdc\xe5\xb5\xd2\xd7\x62\x28\x0d\x58\xdf\xce\x5a\x72\x95\x58\xc4\x67\x14\xde\x4e\xbc\x7c\x23\x7e\x4a\xd1\x36\x32\xe3\xf5\xcf\x1b\x9b\x9d\xdf\xb7\x3e\x47\xff\x5f\x02\x75\x2f\x3e\x51\xbb\x4f\x02\xc0\xec\x86\x27\x06\x20\x81\xea\x6e\xa0\xa2\x00\x66\xf7\x9d\x2a\x50\x04\x68\xe0\x02\x10\xbb\xb1\x8b\x02\x8a\xc0\x09\xa8\x00\xd7\xdd\x3f\x94\x01\x1a\xa8\xfc\x25\xcf\xd1\x2e\x7f\x3b\xee\x21\x92\x9f\xb2\xe9\x2a\x1c\x38\xb9\x10\x6b\x3a\x9e\x15\x37\x12\x54\x41\x95\x77\xcf\xa0\x30\xb1\x66\x6b\xaa\x46\x78\x77\x28\xf6\x47\x97\xc6\xe5\x73\xdb\x23\x13\xa1\xd0\x76\x82\x1b\xfd\xbd\x97\x58\xcb\x47\xc4\x7a\x55\xb4\x2e\x4e\x5a\x86\x9c\xde\xca\x6d\x06\xbf\xcb\x6d\x22\xec\x7e\xb5\xd0\xfb\xb3\xb4\xac\x82\xf5\xc2\xbb\x62\xdc\xe6\xbb\xc1\x55\xef\xb5\x55\xbf\x96\x95\xd6\xde\x37\x69\x2e\xa8\xde\x09\x65\x4d\x09\x92\x05\x0a\xa9\xfe\x82\x24\x36\xe6\xe2\x50\x79\x20\x54\x64\xe5\x7b\xe7\xd9\xd4\x15\xc8\x3f\x38\xe6\xfc\xcb\x1e\xbf\x6e\x03\x04\xf8\x2f\xf1\xbf\xba\xd3\x17\x10\x81\x1b\xf0\x04\xee\xc0\x73\x57\xf9\xfe\x65\x2b\x37\xc2\xdf\x3a\x2d\xe5\x9a\x29\x31\x56\x1b\x18\xac\x49\x38\xc4\x22\x94\xfc\x99\xdd\xe2\xef\x30\x25\x09\xea\x0b\x95\xda\x9d\xd6\x1e\x7a\x0a\xad\xd2\xbf\xfe\xdc\xdc\x5e\x25\xfb\x49\x92\xc8\x63\x5b\x0f\xaf\x30\x92\x94\xef\x37\x49\x79\xdc\x52\xb3\xa6\x66\x1f\xeb\xf4\xbb\xe1\x36\xa8\x03\x8b\x21\xca\x00\x38\x5e\x9c\xcf\x2c\x62\x60\xa2\x05\x8e\x23\xd9\x24\x27\xb9\x24\x4e\x8a\xdd\xd6\x0a\x60\x8f\x3b\x79\xc8\x92\x51\xce\x9e\x3d\xcd\xdd\x3c\x49\xaa\x8c\x4e\x3f\xad\xb4\x34\xfc\x21\x6f\xe0\xa2\x4b\x4e\x96\x59\xb6\x47\x53\xdf\xe8\x15\x71\x9d\xa2\x26\x01\x93\xae\x22\x22\xeb\x18\x81\x52\x3d\x2c\xd1\x1c\x6e\xfa\xf0\xc1\x68\x83\x9f\xdd\x5c\xfd\x00\x9f\x53\x98\x7a\x41\x58\x81\x31\xcf\x32\x7a\xc6\x64\xb1\xf7\x43\xed\x57\x5c\xfc\xb7\x1c\x2e\x88\x30\x31\x27\xb2\x4f\xe8\xec\x6c\x1c\xb3\xdb\x58\x88\x6c\x3a\xd6\xba\xaa\xc7\x31\x7c\x81\x61\x6c\xea\x39\x32\x53\x78\x52\x98\xcd\x88\x7f\xca\xc2\xee\x5a\x2c\x17\xc1\xc6\xec\x74\xdb\x55\x3d\x4e\xe4\x92\x1f\x12\x0b\xeb\x09\xbd\x4a\x93\x86\xa2\x7d\x12\x6a\xf4\x91\x2f\x06\xf4\x67\xb1\xcd\xfb\xfe\xe1\x43\xfe\x7f\xc1\xff\x04\x00\x00\xff\xff\x14\xfc\x01\xb4\x88\x0e\x00\x00")

func tempextensionCfeBytes() ([]byte, error) {
	return bindataRead(
		_tempextensionCfe,
		"tempExtension.cfe",
	)
}

func tempextensionCfe() (*asset, error) {
	bytes, err := tempextensionCfeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tempExtension.cfe", size: 3720, mode: os.FileMode(420), modTime: time.Unix(1600431525, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tempExtension.cfe": tempextensionCfe,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tempExtension.cfe": &bintree{tempextensionCfe, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
