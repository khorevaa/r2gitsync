// Code generated by entc, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/khorevaa/r2gitsync/internal/services/db/plugin"
	"github.com/khorevaa/r2gitsync/internal/services/db/pluginversion"
)

// PluginVersionCreate is the builder for creating a PluginVersion entity.
type PluginVersionCreate struct {
	config
	mutation *PluginVersionMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (pvc *PluginVersionCreate) SetCreatedAt(t time.Time) *PluginVersionCreate {
	pvc.mutation.SetCreatedAt(t)
	return pvc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pvc *PluginVersionCreate) SetNillableCreatedAt(t *time.Time) *PluginVersionCreate {
	if t != nil {
		pvc.SetCreatedAt(*t)
	}
	return pvc
}

// SetUpdatedAt sets the "updated_at" field.
func (pvc *PluginVersionCreate) SetUpdatedAt(t time.Time) *PluginVersionCreate {
	pvc.mutation.SetUpdatedAt(t)
	return pvc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pvc *PluginVersionCreate) SetNillableUpdatedAt(t *time.Time) *PluginVersionCreate {
	if t != nil {
		pvc.SetUpdatedAt(*t)
	}
	return pvc
}

// SetDeletedAt sets the "deleted_at" field.
func (pvc *PluginVersionCreate) SetDeletedAt(t time.Time) *PluginVersionCreate {
	pvc.mutation.SetDeletedAt(t)
	return pvc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pvc *PluginVersionCreate) SetNillableDeletedAt(t *time.Time) *PluginVersionCreate {
	if t != nil {
		pvc.SetDeletedAt(*t)
	}
	return pvc
}

// SetVersion sets the "version" field.
func (pvc *PluginVersionCreate) SetVersion(s string) *PluginVersionCreate {
	pvc.mutation.SetVersion(s)
	return pvc
}

// SetDescription sets the "description" field.
func (pvc *PluginVersionCreate) SetDescription(s string) *PluginVersionCreate {
	pvc.mutation.SetDescription(s)
	return pvc
}

// SetBroken sets the "broken" field.
func (pvc *PluginVersionCreate) SetBroken(b bool) *PluginVersionCreate {
	pvc.mutation.SetBroken(b)
	return pvc
}

// SetID sets the "id" field.
func (pvc *PluginVersionCreate) SetID(u uuid.UUID) *PluginVersionCreate {
	pvc.mutation.SetID(u)
	return pvc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pvc *PluginVersionCreate) SetNillableID(u *uuid.UUID) *PluginVersionCreate {
	if u != nil {
		pvc.SetID(*u)
	}
	return pvc
}

// SetPluginID sets the "plugin" edge to the Plugin entity by ID.
func (pvc *PluginVersionCreate) SetPluginID(id uuid.UUID) *PluginVersionCreate {
	pvc.mutation.SetPluginID(id)
	return pvc
}

// SetPlugin sets the "plugin" edge to the Plugin entity.
func (pvc *PluginVersionCreate) SetPlugin(p *Plugin) *PluginVersionCreate {
	return pvc.SetPluginID(p.ID)
}

// Mutation returns the PluginVersionMutation object of the builder.
func (pvc *PluginVersionCreate) Mutation() *PluginVersionMutation {
	return pvc.mutation
}

// Save creates the PluginVersion in the database.
func (pvc *PluginVersionCreate) Save(ctx context.Context) (*PluginVersion, error) {
	var (
		err  error
		node *PluginVersion
	)
	pvc.defaults()
	if len(pvc.hooks) == 0 {
		if err = pvc.check(); err != nil {
			return nil, err
		}
		node, err = pvc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PluginVersionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pvc.check(); err != nil {
				return nil, err
			}
			pvc.mutation = mutation
			if node, err = pvc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pvc.hooks) - 1; i >= 0; i-- {
			if pvc.hooks[i] == nil {
				return nil, fmt.Errorf("db: uninitialized hook (forgotten import db/runtime?)")
			}
			mut = pvc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pvc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pvc *PluginVersionCreate) SaveX(ctx context.Context) *PluginVersion {
	v, err := pvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pvc *PluginVersionCreate) Exec(ctx context.Context) error {
	_, err := pvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvc *PluginVersionCreate) ExecX(ctx context.Context) {
	if err := pvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pvc *PluginVersionCreate) defaults() {
	if _, ok := pvc.mutation.CreatedAt(); !ok {
		v := pluginversion.DefaultCreatedAt()
		pvc.mutation.SetCreatedAt(v)
	}
	if _, ok := pvc.mutation.UpdatedAt(); !ok {
		v := pluginversion.DefaultUpdatedAt()
		pvc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pvc.mutation.ID(); !ok {
		v := pluginversion.DefaultID()
		pvc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pvc *PluginVersionCreate) check() error {
	if _, ok := pvc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "PluginVersion.created_at"`)}
	}
	if _, ok := pvc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "PluginVersion.updated_at"`)}
	}
	if _, ok := pvc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`db: missing required field "PluginVersion.version"`)}
	}
	if _, ok := pvc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`db: missing required field "PluginVersion.description"`)}
	}
	if v, ok := pvc.mutation.Description(); ok {
		if err := pluginversion.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`db: validator failed for field "PluginVersion.description": %w`, err)}
		}
	}
	if _, ok := pvc.mutation.Broken(); !ok {
		return &ValidationError{Name: "broken", err: errors.New(`db: missing required field "PluginVersion.broken"`)}
	}
	if _, ok := pvc.mutation.PluginID(); !ok {
		return &ValidationError{Name: "plugin", err: errors.New(`db: missing required edge "PluginVersion.plugin"`)}
	}
	return nil
}

func (pvc *PluginVersionCreate) sqlSave(ctx context.Context) (*PluginVersion, error) {
	_node, _spec := pvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (pvc *PluginVersionCreate) createSpec() (*PluginVersion, *sqlgraph.CreateSpec) {
	var (
		_node = &PluginVersion{config: pvc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: pluginversion.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: pluginversion.FieldID,
			},
		}
	)
	if id, ok := pvc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pvc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pluginversion.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := pvc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pluginversion.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := pvc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pluginversion.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := pvc.mutation.Version(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pluginversion.FieldVersion,
		})
		_node.Version = value
	}
	if value, ok := pvc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pluginversion.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := pvc.mutation.Broken(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: pluginversion.FieldBroken,
		})
		_node.Broken = value
	}
	if nodes := pvc.mutation.PluginIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pluginversion.PluginTable,
			Columns: []string{pluginversion.PluginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plugin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.plugin_version_plugin = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PluginVersionCreateBulk is the builder for creating many PluginVersion entities in bulk.
type PluginVersionCreateBulk struct {
	config
	builders []*PluginVersionCreate
}

// Save creates the PluginVersion entities in the database.
func (pvcb *PluginVersionCreateBulk) Save(ctx context.Context) ([]*PluginVersion, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pvcb.builders))
	nodes := make([]*PluginVersion, len(pvcb.builders))
	mutators := make([]Mutator, len(pvcb.builders))
	for i := range pvcb.builders {
		func(i int, root context.Context) {
			builder := pvcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PluginVersionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pvcb *PluginVersionCreateBulk) SaveX(ctx context.Context) []*PluginVersion {
	v, err := pvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pvcb *PluginVersionCreateBulk) Exec(ctx context.Context) error {
	_, err := pvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvcb *PluginVersionCreateBulk) ExecX(ctx context.Context) {
	if err := pvcb.Exec(ctx); err != nil {
		panic(err)
	}
}
