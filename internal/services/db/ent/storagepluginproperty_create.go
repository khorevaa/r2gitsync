// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/khorevaa/r2gitsync/internal/services/db/ent/storageplugin"
	"github.com/khorevaa/r2gitsync/internal/services/db/ent/storagepluginproperty"
)

// StoragePluginPropertyCreate is the builder for creating a StoragePluginProperty entity.
type StoragePluginPropertyCreate struct {
	config
	mutation *StoragePluginPropertyMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (sppc *StoragePluginPropertyCreate) SetCreatedAt(t time.Time) *StoragePluginPropertyCreate {
	sppc.mutation.SetCreatedAt(t)
	return sppc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sppc *StoragePluginPropertyCreate) SetNillableCreatedAt(t *time.Time) *StoragePluginPropertyCreate {
	if t != nil {
		sppc.SetCreatedAt(*t)
	}
	return sppc
}

// SetUpdatedAt sets the "updated_at" field.
func (sppc *StoragePluginPropertyCreate) SetUpdatedAt(t time.Time) *StoragePluginPropertyCreate {
	sppc.mutation.SetUpdatedAt(t)
	return sppc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sppc *StoragePluginPropertyCreate) SetNillableUpdatedAt(t *time.Time) *StoragePluginPropertyCreate {
	if t != nil {
		sppc.SetUpdatedAt(*t)
	}
	return sppc
}

// SetDeletedAt sets the "deleted_at" field.
func (sppc *StoragePluginPropertyCreate) SetDeletedAt(t time.Time) *StoragePluginPropertyCreate {
	sppc.mutation.SetDeletedAt(t)
	return sppc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sppc *StoragePluginPropertyCreate) SetNillableDeletedAt(t *time.Time) *StoragePluginPropertyCreate {
	if t != nil {
		sppc.SetDeletedAt(*t)
	}
	return sppc
}

// SetName sets the "name" field.
func (sppc *StoragePluginPropertyCreate) SetName(s string) *StoragePluginPropertyCreate {
	sppc.mutation.SetName(s)
	return sppc
}

// SetValue sets the "value" field.
func (sppc *StoragePluginPropertyCreate) SetValue(s string) *StoragePluginPropertyCreate {
	sppc.mutation.SetValue(s)
	return sppc
}

// SetID sets the "id" field.
func (sppc *StoragePluginPropertyCreate) SetID(u uuid.UUID) *StoragePluginPropertyCreate {
	sppc.mutation.SetID(u)
	return sppc
}

// SetPluginID sets the "plugin" edge to the StoragePlugin entity by ID.
func (sppc *StoragePluginPropertyCreate) SetPluginID(id uuid.UUID) *StoragePluginPropertyCreate {
	sppc.mutation.SetPluginID(id)
	return sppc
}

// SetPlugin sets the "plugin" edge to the StoragePlugin entity.
func (sppc *StoragePluginPropertyCreate) SetPlugin(s *StoragePlugin) *StoragePluginPropertyCreate {
	return sppc.SetPluginID(s.ID)
}

// Mutation returns the StoragePluginPropertyMutation object of the builder.
func (sppc *StoragePluginPropertyCreate) Mutation() *StoragePluginPropertyMutation {
	return sppc.mutation
}

// Save creates the StoragePluginProperty in the database.
func (sppc *StoragePluginPropertyCreate) Save(ctx context.Context) (*StoragePluginProperty, error) {
	var (
		err  error
		node *StoragePluginProperty
	)
	sppc.defaults()
	if len(sppc.hooks) == 0 {
		if err = sppc.check(); err != nil {
			return nil, err
		}
		node, err = sppc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StoragePluginPropertyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sppc.check(); err != nil {
				return nil, err
			}
			sppc.mutation = mutation
			if node, err = sppc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sppc.hooks) - 1; i >= 0; i-- {
			if sppc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sppc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sppc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sppc *StoragePluginPropertyCreate) SaveX(ctx context.Context) *StoragePluginProperty {
	v, err := sppc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sppc *StoragePluginPropertyCreate) Exec(ctx context.Context) error {
	_, err := sppc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sppc *StoragePluginPropertyCreate) ExecX(ctx context.Context) {
	if err := sppc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sppc *StoragePluginPropertyCreate) defaults() {
	if _, ok := sppc.mutation.CreatedAt(); !ok {
		v := storagepluginproperty.DefaultCreatedAt()
		sppc.mutation.SetCreatedAt(v)
	}
	if _, ok := sppc.mutation.UpdatedAt(); !ok {
		v := storagepluginproperty.DefaultUpdatedAt()
		sppc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sppc *StoragePluginPropertyCreate) check() error {
	if _, ok := sppc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "StoragePluginProperty.created_at"`)}
	}
	if _, ok := sppc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "StoragePluginProperty.updated_at"`)}
	}
	if _, ok := sppc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "StoragePluginProperty.name"`)}
	}
	if _, ok := sppc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "StoragePluginProperty.value"`)}
	}
	if _, ok := sppc.mutation.PluginID(); !ok {
		return &ValidationError{Name: "plugin", err: errors.New(`ent: missing required edge "StoragePluginProperty.plugin"`)}
	}
	return nil
}

func (sppc *StoragePluginPropertyCreate) sqlSave(ctx context.Context) (*StoragePluginProperty, error) {
	_node, _spec := sppc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sppc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (sppc *StoragePluginPropertyCreate) createSpec() (*StoragePluginProperty, *sqlgraph.CreateSpec) {
	var (
		_node = &StoragePluginProperty{config: sppc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: storagepluginproperty.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: storagepluginproperty.FieldID,
			},
		}
	)
	if id, ok := sppc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sppc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: storagepluginproperty.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := sppc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: storagepluginproperty.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := sppc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: storagepluginproperty.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := sppc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: storagepluginproperty.FieldName,
		})
		_node.Name = value
	}
	if value, ok := sppc.mutation.Value(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: storagepluginproperty.FieldValue,
		})
		_node.Value = value
	}
	if nodes := sppc.mutation.PluginIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   storagepluginproperty.PluginTable,
			Columns: []string{storagepluginproperty.PluginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: storageplugin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.storage_plugin_properties = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StoragePluginPropertyCreateBulk is the builder for creating many StoragePluginProperty entities in bulk.
type StoragePluginPropertyCreateBulk struct {
	config
	builders []*StoragePluginPropertyCreate
}

// Save creates the StoragePluginProperty entities in the database.
func (sppcb *StoragePluginPropertyCreateBulk) Save(ctx context.Context) ([]*StoragePluginProperty, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sppcb.builders))
	nodes := make([]*StoragePluginProperty, len(sppcb.builders))
	mutators := make([]Mutator, len(sppcb.builders))
	for i := range sppcb.builders {
		func(i int, root context.Context) {
			builder := sppcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StoragePluginPropertyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sppcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sppcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sppcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sppcb *StoragePluginPropertyCreateBulk) SaveX(ctx context.Context) []*StoragePluginProperty {
	v, err := sppcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sppcb *StoragePluginPropertyCreateBulk) Exec(ctx context.Context) error {
	_, err := sppcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sppcb *StoragePluginPropertyCreateBulk) ExecX(ctx context.Context) {
	if err := sppcb.Exec(ctx); err != nil {
		panic(err)
	}
}
