// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/khorevaa/r2gitsync/internal/services/db/ent/predicate"
	"github.com/khorevaa/r2gitsync/internal/services/db/ent/project"
	"github.com/khorevaa/r2gitsync/internal/services/db/ent/storage"
)

// StorageUpdate is the builder for updating Storage entities.
type StorageUpdate struct {
	config
	hooks    []Hook
	mutation *StorageMutation
}

// Where appends a list predicates to the StorageUpdate builder.
func (su *StorageUpdate) Where(ps ...predicate.Storage) *StorageUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *StorageUpdate) SetUpdatedAt(t time.Time) *StorageUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetDeletedAt sets the "deleted_at" field.
func (su *StorageUpdate) SetDeletedAt(t time.Time) *StorageUpdate {
	su.mutation.SetDeletedAt(t)
	return su
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (su *StorageUpdate) SetNillableDeletedAt(t *time.Time) *StorageUpdate {
	if t != nil {
		su.SetDeletedAt(*t)
	}
	return su
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (su *StorageUpdate) ClearDeletedAt() *StorageUpdate {
	su.mutation.ClearDeletedAt()
	return su
}

// SetConnectionString sets the "connection_string" field.
func (su *StorageUpdate) SetConnectionString(s string) *StorageUpdate {
	su.mutation.SetConnectionString(s)
	return su
}

// SetDevelop sets the "develop" field.
func (su *StorageUpdate) SetDevelop(b bool) *StorageUpdate {
	su.mutation.SetDevelop(b)
	return su
}

// SetExtension sets the "extension" field.
func (su *StorageUpdate) SetExtension(s string) *StorageUpdate {
	su.mutation.SetExtension(s)
	return su
}

// SetNillableExtension sets the "extension" field if the given value is not nil.
func (su *StorageUpdate) SetNillableExtension(s *string) *StorageUpdate {
	if s != nil {
		su.SetExtension(*s)
	}
	return su
}

// ClearExtension clears the value of the "extension" field.
func (su *StorageUpdate) ClearExtension() *StorageUpdate {
	su.mutation.ClearExtension()
	return su
}

// SetType sets the "type" field.
func (su *StorageUpdate) SetType(s storage.Type) *StorageUpdate {
	su.mutation.SetType(s)
	return su
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (su *StorageUpdate) SetProjectID(id uuid.UUID) *StorageUpdate {
	su.mutation.SetProjectID(id)
	return su
}

// SetProject sets the "project" edge to the Project entity.
func (su *StorageUpdate) SetProject(p *Project) *StorageUpdate {
	return su.SetProjectID(p.ID)
}

// SetParentID sets the "parent" edge to the Storage entity by ID.
func (su *StorageUpdate) SetParentID(id uuid.UUID) *StorageUpdate {
	su.mutation.SetParentID(id)
	return su
}

// SetNillableParentID sets the "parent" edge to the Storage entity by ID if the given value is not nil.
func (su *StorageUpdate) SetNillableParentID(id *uuid.UUID) *StorageUpdate {
	if id != nil {
		su = su.SetParentID(*id)
	}
	return su
}

// SetParent sets the "parent" edge to the Storage entity.
func (su *StorageUpdate) SetParent(s *Storage) *StorageUpdate {
	return su.SetParentID(s.ID)
}

// Mutation returns the StorageMutation object of the builder.
func (su *StorageUpdate) Mutation() *StorageMutation {
	return su.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (su *StorageUpdate) ClearProject() *StorageUpdate {
	su.mutation.ClearProject()
	return su
}

// ClearParent clears the "parent" edge to the Storage entity.
func (su *StorageUpdate) ClearParent() *StorageUpdate {
	su.mutation.ClearParent()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StorageUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	su.defaults()
	if len(su.hooks) == 0 {
		if err = su.check(); err != nil {
			return 0, err
		}
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StorageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = su.check(); err != nil {
				return 0, err
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *StorageUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StorageUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StorageUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *StorageUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := storage.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *StorageUpdate) check() error {
	if v, ok := su.mutation.GetType(); ok {
		if err := storage.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Storage.type": %w`, err)}
		}
	}
	if _, ok := su.mutation.ProjectID(); su.mutation.ProjectCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Storage.project"`)
	}
	return nil
}

func (su *StorageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   storage.Table,
			Columns: storage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: storage.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: storage.FieldUpdatedAt,
		})
	}
	if value, ok := su.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: storage.FieldDeletedAt,
		})
	}
	if su.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: storage.FieldDeletedAt,
		})
	}
	if value, ok := su.mutation.ConnectionString(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: storage.FieldConnectionString,
		})
	}
	if value, ok := su.mutation.Develop(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: storage.FieldDevelop,
		})
	}
	if value, ok := su.mutation.Extension(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: storage.FieldExtension,
		})
	}
	if su.mutation.ExtensionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: storage.FieldExtension,
		})
	}
	if value, ok := su.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: storage.FieldType,
		})
	}
	if su.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   storage.ProjectTable,
			Columns: []string{storage.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   storage.ProjectTable,
			Columns: []string{storage.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   storage.ParentTable,
			Columns: []string{storage.ParentColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: storage.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   storage.ParentTable,
			Columns: []string{storage.ParentColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: storage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{storage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// StorageUpdateOne is the builder for updating a single Storage entity.
type StorageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StorageMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *StorageUpdateOne) SetUpdatedAt(t time.Time) *StorageUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetDeletedAt sets the "deleted_at" field.
func (suo *StorageUpdateOne) SetDeletedAt(t time.Time) *StorageUpdateOne {
	suo.mutation.SetDeletedAt(t)
	return suo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suo *StorageUpdateOne) SetNillableDeletedAt(t *time.Time) *StorageUpdateOne {
	if t != nil {
		suo.SetDeletedAt(*t)
	}
	return suo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (suo *StorageUpdateOne) ClearDeletedAt() *StorageUpdateOne {
	suo.mutation.ClearDeletedAt()
	return suo
}

// SetConnectionString sets the "connection_string" field.
func (suo *StorageUpdateOne) SetConnectionString(s string) *StorageUpdateOne {
	suo.mutation.SetConnectionString(s)
	return suo
}

// SetDevelop sets the "develop" field.
func (suo *StorageUpdateOne) SetDevelop(b bool) *StorageUpdateOne {
	suo.mutation.SetDevelop(b)
	return suo
}

// SetExtension sets the "extension" field.
func (suo *StorageUpdateOne) SetExtension(s string) *StorageUpdateOne {
	suo.mutation.SetExtension(s)
	return suo
}

// SetNillableExtension sets the "extension" field if the given value is not nil.
func (suo *StorageUpdateOne) SetNillableExtension(s *string) *StorageUpdateOne {
	if s != nil {
		suo.SetExtension(*s)
	}
	return suo
}

// ClearExtension clears the value of the "extension" field.
func (suo *StorageUpdateOne) ClearExtension() *StorageUpdateOne {
	suo.mutation.ClearExtension()
	return suo
}

// SetType sets the "type" field.
func (suo *StorageUpdateOne) SetType(s storage.Type) *StorageUpdateOne {
	suo.mutation.SetType(s)
	return suo
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (suo *StorageUpdateOne) SetProjectID(id uuid.UUID) *StorageUpdateOne {
	suo.mutation.SetProjectID(id)
	return suo
}

// SetProject sets the "project" edge to the Project entity.
func (suo *StorageUpdateOne) SetProject(p *Project) *StorageUpdateOne {
	return suo.SetProjectID(p.ID)
}

// SetParentID sets the "parent" edge to the Storage entity by ID.
func (suo *StorageUpdateOne) SetParentID(id uuid.UUID) *StorageUpdateOne {
	suo.mutation.SetParentID(id)
	return suo
}

// SetNillableParentID sets the "parent" edge to the Storage entity by ID if the given value is not nil.
func (suo *StorageUpdateOne) SetNillableParentID(id *uuid.UUID) *StorageUpdateOne {
	if id != nil {
		suo = suo.SetParentID(*id)
	}
	return suo
}

// SetParent sets the "parent" edge to the Storage entity.
func (suo *StorageUpdateOne) SetParent(s *Storage) *StorageUpdateOne {
	return suo.SetParentID(s.ID)
}

// Mutation returns the StorageMutation object of the builder.
func (suo *StorageUpdateOne) Mutation() *StorageMutation {
	return suo.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (suo *StorageUpdateOne) ClearProject() *StorageUpdateOne {
	suo.mutation.ClearProject()
	return suo
}

// ClearParent clears the "parent" edge to the Storage entity.
func (suo *StorageUpdateOne) ClearParent() *StorageUpdateOne {
	suo.mutation.ClearParent()
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StorageUpdateOne) Select(field string, fields ...string) *StorageUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Storage entity.
func (suo *StorageUpdateOne) Save(ctx context.Context) (*Storage, error) {
	var (
		err  error
		node *Storage
	)
	suo.defaults()
	if len(suo.hooks) == 0 {
		if err = suo.check(); err != nil {
			return nil, err
		}
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StorageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = suo.check(); err != nil {
				return nil, err
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StorageUpdateOne) SaveX(ctx context.Context) *Storage {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StorageUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StorageUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *StorageUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := storage.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *StorageUpdateOne) check() error {
	if v, ok := suo.mutation.GetType(); ok {
		if err := storage.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Storage.type": %w`, err)}
		}
	}
	if _, ok := suo.mutation.ProjectID(); suo.mutation.ProjectCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Storage.project"`)
	}
	return nil
}

func (suo *StorageUpdateOne) sqlSave(ctx context.Context) (_node *Storage, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   storage.Table,
			Columns: storage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: storage.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Storage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, storage.FieldID)
		for _, f := range fields {
			if !storage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != storage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: storage.FieldUpdatedAt,
		})
	}
	if value, ok := suo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: storage.FieldDeletedAt,
		})
	}
	if suo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: storage.FieldDeletedAt,
		})
	}
	if value, ok := suo.mutation.ConnectionString(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: storage.FieldConnectionString,
		})
	}
	if value, ok := suo.mutation.Develop(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: storage.FieldDevelop,
		})
	}
	if value, ok := suo.mutation.Extension(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: storage.FieldExtension,
		})
	}
	if suo.mutation.ExtensionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: storage.FieldExtension,
		})
	}
	if value, ok := suo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: storage.FieldType,
		})
	}
	if suo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   storage.ProjectTable,
			Columns: []string{storage.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   storage.ProjectTable,
			Columns: []string{storage.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   storage.ParentTable,
			Columns: []string{storage.ParentColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: storage.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   storage.ParentTable,
			Columns: []string{storage.ParentColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: storage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Storage{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{storage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
