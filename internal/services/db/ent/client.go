// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/google/uuid"
	"github.com/khorevaa/r2gitsync/internal/services/db/ent/migrate"

	"github.com/khorevaa/r2gitsync/internal/services/db/ent/asset"
	"github.com/khorevaa/r2gitsync/internal/services/db/ent/plugin"
	"github.com/khorevaa/r2gitsync/internal/services/db/ent/project"
	"github.com/khorevaa/r2gitsync/internal/services/db/ent/storage"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Asset is the client for interacting with the Asset builders.
	Asset *AssetClient
	// Plugin is the client for interacting with the Plugin builders.
	Plugin *PluginClient
	// Project is the client for interacting with the Project builders.
	Project *ProjectClient
	// Storage is the client for interacting with the Storage builders.
	Storage *StorageClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Asset = NewAssetClient(c.config)
	c.Plugin = NewPluginClient(c.config)
	c.Project = NewProjectClient(c.config)
	c.Storage = NewStorageClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:     ctx,
		config:  cfg,
		Asset:   NewAssetClient(cfg),
		Plugin:  NewPluginClient(cfg),
		Project: NewProjectClient(cfg),
		Storage: NewStorageClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:     ctx,
		config:  cfg,
		Asset:   NewAssetClient(cfg),
		Plugin:  NewPluginClient(cfg),
		Project: NewProjectClient(cfg),
		Storage: NewStorageClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Asset.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Asset.Use(hooks...)
	c.Plugin.Use(hooks...)
	c.Project.Use(hooks...)
	c.Storage.Use(hooks...)
}

// AssetClient is a client for the Asset schema.
type AssetClient struct {
	config
}

// NewAssetClient returns a client for the Asset from the given config.
func NewAssetClient(c config) *AssetClient {
	return &AssetClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `asset.Hooks(f(g(h())))`.
func (c *AssetClient) Use(hooks ...Hook) {
	c.hooks.Asset = append(c.hooks.Asset, hooks...)
}

// Create returns a create builder for Asset.
func (c *AssetClient) Create() *AssetCreate {
	mutation := newAssetMutation(c.config, OpCreate)
	return &AssetCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Asset entities.
func (c *AssetClient) CreateBulk(builders ...*AssetCreate) *AssetCreateBulk {
	return &AssetCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Asset.
func (c *AssetClient) Update() *AssetUpdate {
	mutation := newAssetMutation(c.config, OpUpdate)
	return &AssetUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AssetClient) UpdateOne(a *Asset) *AssetUpdateOne {
	mutation := newAssetMutation(c.config, OpUpdateOne, withAsset(a))
	return &AssetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AssetClient) UpdateOneID(id uuid.UUID) *AssetUpdateOne {
	mutation := newAssetMutation(c.config, OpUpdateOne, withAssetID(id))
	return &AssetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Asset.
func (c *AssetClient) Delete() *AssetDelete {
	mutation := newAssetMutation(c.config, OpDelete)
	return &AssetDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AssetClient) DeleteOne(a *Asset) *AssetDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AssetClient) DeleteOneID(id uuid.UUID) *AssetDeleteOne {
	builder := c.Delete().Where(asset.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AssetDeleteOne{builder}
}

// Query returns a query builder for Asset.
func (c *AssetClient) Query() *AssetQuery {
	return &AssetQuery{
		config: c.config,
	}
}

// Get returns a Asset entity by its id.
func (c *AssetClient) Get(ctx context.Context, id uuid.UUID) (*Asset, error) {
	return c.Query().Where(asset.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AssetClient) GetX(ctx context.Context, id uuid.UUID) *Asset {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AssetClient) Hooks() []Hook {
	return c.hooks.Asset
}

// PluginClient is a client for the Plugin schema.
type PluginClient struct {
	config
}

// NewPluginClient returns a client for the Plugin from the given config.
func NewPluginClient(c config) *PluginClient {
	return &PluginClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `plugin.Hooks(f(g(h())))`.
func (c *PluginClient) Use(hooks ...Hook) {
	c.hooks.Plugin = append(c.hooks.Plugin, hooks...)
}

// Create returns a create builder for Plugin.
func (c *PluginClient) Create() *PluginCreate {
	mutation := newPluginMutation(c.config, OpCreate)
	return &PluginCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Plugin entities.
func (c *PluginClient) CreateBulk(builders ...*PluginCreate) *PluginCreateBulk {
	return &PluginCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Plugin.
func (c *PluginClient) Update() *PluginUpdate {
	mutation := newPluginMutation(c.config, OpUpdate)
	return &PluginUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PluginClient) UpdateOne(pl *Plugin) *PluginUpdateOne {
	mutation := newPluginMutation(c.config, OpUpdateOne, withPlugin(pl))
	return &PluginUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PluginClient) UpdateOneID(id uuid.UUID) *PluginUpdateOne {
	mutation := newPluginMutation(c.config, OpUpdateOne, withPluginID(id))
	return &PluginUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Plugin.
func (c *PluginClient) Delete() *PluginDelete {
	mutation := newPluginMutation(c.config, OpDelete)
	return &PluginDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PluginClient) DeleteOne(pl *Plugin) *PluginDeleteOne {
	return c.DeleteOneID(pl.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PluginClient) DeleteOneID(id uuid.UUID) *PluginDeleteOne {
	builder := c.Delete().Where(plugin.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PluginDeleteOne{builder}
}

// Query returns a query builder for Plugin.
func (c *PluginClient) Query() *PluginQuery {
	return &PluginQuery{
		config: c.config,
	}
}

// Get returns a Plugin entity by its id.
func (c *PluginClient) Get(ctx context.Context, id uuid.UUID) (*Plugin, error) {
	return c.Query().Where(plugin.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PluginClient) GetX(ctx context.Context, id uuid.UUID) *Plugin {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PluginClient) Hooks() []Hook {
	return c.hooks.Plugin
}

// ProjectClient is a client for the Project schema.
type ProjectClient struct {
	config
}

// NewProjectClient returns a client for the Project from the given config.
func NewProjectClient(c config) *ProjectClient {
	return &ProjectClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `project.Hooks(f(g(h())))`.
func (c *ProjectClient) Use(hooks ...Hook) {
	c.hooks.Project = append(c.hooks.Project, hooks...)
}

// Create returns a create builder for Project.
func (c *ProjectClient) Create() *ProjectCreate {
	mutation := newProjectMutation(c.config, OpCreate)
	return &ProjectCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Project entities.
func (c *ProjectClient) CreateBulk(builders ...*ProjectCreate) *ProjectCreateBulk {
	return &ProjectCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Project.
func (c *ProjectClient) Update() *ProjectUpdate {
	mutation := newProjectMutation(c.config, OpUpdate)
	return &ProjectUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectClient) UpdateOne(pr *Project) *ProjectUpdateOne {
	mutation := newProjectMutation(c.config, OpUpdateOne, withProject(pr))
	return &ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectClient) UpdateOneID(id uuid.UUID) *ProjectUpdateOne {
	mutation := newProjectMutation(c.config, OpUpdateOne, withProjectID(id))
	return &ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Project.
func (c *ProjectClient) Delete() *ProjectDelete {
	mutation := newProjectMutation(c.config, OpDelete)
	return &ProjectDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProjectClient) DeleteOne(pr *Project) *ProjectDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProjectClient) DeleteOneID(id uuid.UUID) *ProjectDeleteOne {
	builder := c.Delete().Where(project.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectDeleteOne{builder}
}

// Query returns a query builder for Project.
func (c *ProjectClient) Query() *ProjectQuery {
	return &ProjectQuery{
		config: c.config,
	}
}

// Get returns a Project entity by its id.
func (c *ProjectClient) Get(ctx context.Context, id uuid.UUID) (*Project, error) {
	return c.Query().Where(project.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectClient) GetX(ctx context.Context, id uuid.UUID) *Project {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStorages queries the storages edge of a Project.
func (c *ProjectClient) QueryStorages(pr *Project) *StorageQuery {
	query := &StorageQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(storage.Table, storage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.StoragesTable, project.StoragesColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMasterStorage queries the master_storage edge of a Project.
func (c *ProjectClient) QueryMasterStorage(pr *Project) *StorageQuery {
	query := &StorageQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(storage.Table, storage.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, project.MasterStorageTable, project.MasterStorageColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDevelopStorage queries the develop_storage edge of a Project.
func (c *ProjectClient) QueryDevelopStorage(pr *Project) *StorageQuery {
	query := &StorageQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(storage.Table, storage.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, project.DevelopStorageTable, project.DevelopStorageColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectClient) Hooks() []Hook {
	return c.hooks.Project
}

// StorageClient is a client for the Storage schema.
type StorageClient struct {
	config
}

// NewStorageClient returns a client for the Storage from the given config.
func NewStorageClient(c config) *StorageClient {
	return &StorageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `storage.Hooks(f(g(h())))`.
func (c *StorageClient) Use(hooks ...Hook) {
	c.hooks.Storage = append(c.hooks.Storage, hooks...)
}

// Create returns a create builder for Storage.
func (c *StorageClient) Create() *StorageCreate {
	mutation := newStorageMutation(c.config, OpCreate)
	return &StorageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Storage entities.
func (c *StorageClient) CreateBulk(builders ...*StorageCreate) *StorageCreateBulk {
	return &StorageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Storage.
func (c *StorageClient) Update() *StorageUpdate {
	mutation := newStorageMutation(c.config, OpUpdate)
	return &StorageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StorageClient) UpdateOne(s *Storage) *StorageUpdateOne {
	mutation := newStorageMutation(c.config, OpUpdateOne, withStorage(s))
	return &StorageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StorageClient) UpdateOneID(id uuid.UUID) *StorageUpdateOne {
	mutation := newStorageMutation(c.config, OpUpdateOne, withStorageID(id))
	return &StorageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Storage.
func (c *StorageClient) Delete() *StorageDelete {
	mutation := newStorageMutation(c.config, OpDelete)
	return &StorageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StorageClient) DeleteOne(s *Storage) *StorageDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StorageClient) DeleteOneID(id uuid.UUID) *StorageDeleteOne {
	builder := c.Delete().Where(storage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StorageDeleteOne{builder}
}

// Query returns a query builder for Storage.
func (c *StorageClient) Query() *StorageQuery {
	return &StorageQuery{
		config: c.config,
	}
}

// Get returns a Storage entity by its id.
func (c *StorageClient) Get(ctx context.Context, id uuid.UUID) (*Storage, error) {
	return c.Query().Where(storage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StorageClient) GetX(ctx context.Context, id uuid.UUID) *Storage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProject queries the project edge of a Storage.
func (c *StorageClient) QueryProject(s *Storage) *ProjectQuery {
	query := &ProjectQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(storage.Table, storage.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, storage.ProjectTable, storage.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParent queries the parent edge of a Storage.
func (c *StorageClient) QueryParent(s *Storage) *StorageQuery {
	query := &StorageQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(storage.Table, storage.FieldID, id),
			sqlgraph.To(storage.Table, storage.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, storage.ParentTable, storage.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StorageClient) Hooks() []Hook {
	return c.hooks.Storage
}
