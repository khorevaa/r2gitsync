// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/khorevaa/r2gitsync/internal/services/db/ent/pluginversion"
	"github.com/khorevaa/r2gitsync/internal/services/db/ent/storage"
	"github.com/khorevaa/r2gitsync/internal/services/db/ent/storageplugin"
)

// StoragePlugin is the model entity for the StoragePlugin schema.
type StoragePlugin struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Disable holds the value of the "disable" field.
	Disable bool `json:"disable,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StoragePluginQuery when eager-loading is set.
	Edges                  StoragePluginEdges `json:"edges"`
	storage_plugin_storage *uuid.UUID
	storage_plugin_plugin  *uuid.UUID
}

// StoragePluginEdges holds the relations/edges for other nodes in the graph.
type StoragePluginEdges struct {
	// Storage holds the value of the storage edge.
	Storage *Storage `json:"storage,omitempty"`
	// Plugin holds the value of the plugin edge.
	Plugin *PluginVersion `json:"plugin,omitempty"`
	// Properties holds the value of the properties edge.
	Properties []*StoragePluginProperty `json:"properties,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// StorageOrErr returns the Storage value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StoragePluginEdges) StorageOrErr() (*Storage, error) {
	if e.loadedTypes[0] {
		if e.Storage == nil {
			// The edge storage was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: storage.Label}
		}
		return e.Storage, nil
	}
	return nil, &NotLoadedError{edge: "storage"}
}

// PluginOrErr returns the Plugin value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StoragePluginEdges) PluginOrErr() (*PluginVersion, error) {
	if e.loadedTypes[1] {
		if e.Plugin == nil {
			// The edge plugin was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: pluginversion.Label}
		}
		return e.Plugin, nil
	}
	return nil, &NotLoadedError{edge: "plugin"}
}

// PropertiesOrErr returns the Properties value or an error if the edge
// was not loaded in eager-loading.
func (e StoragePluginEdges) PropertiesOrErr() ([]*StoragePluginProperty, error) {
	if e.loadedTypes[2] {
		return e.Properties, nil
	}
	return nil, &NotLoadedError{edge: "properties"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StoragePlugin) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case storageplugin.FieldDisable:
			values[i] = new(sql.NullBool)
		case storageplugin.FieldCreatedAt, storageplugin.FieldUpdatedAt, storageplugin.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case storageplugin.FieldID:
			values[i] = new(uuid.UUID)
		case storageplugin.ForeignKeys[0]: // storage_plugin_storage
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case storageplugin.ForeignKeys[1]: // storage_plugin_plugin
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type StoragePlugin", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StoragePlugin fields.
func (sp *StoragePlugin) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case storageplugin.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				sp.ID = *value
			}
		case storageplugin.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sp.CreatedAt = value.Time
			}
		case storageplugin.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sp.UpdatedAt = value.Time
			}
		case storageplugin.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				sp.DeletedAt = new(time.Time)
				*sp.DeletedAt = value.Time
			}
		case storageplugin.FieldDisable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field disable", values[i])
			} else if value.Valid {
				sp.Disable = value.Bool
			}
		case storageplugin.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field storage_plugin_storage", values[i])
			} else if value.Valid {
				sp.storage_plugin_storage = new(uuid.UUID)
				*sp.storage_plugin_storage = *value.S.(*uuid.UUID)
			}
		case storageplugin.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field storage_plugin_plugin", values[i])
			} else if value.Valid {
				sp.storage_plugin_plugin = new(uuid.UUID)
				*sp.storage_plugin_plugin = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryStorage queries the "storage" edge of the StoragePlugin entity.
func (sp *StoragePlugin) QueryStorage() *StorageQuery {
	return (&StoragePluginClient{config: sp.config}).QueryStorage(sp)
}

// QueryPlugin queries the "plugin" edge of the StoragePlugin entity.
func (sp *StoragePlugin) QueryPlugin() *PluginVersionQuery {
	return (&StoragePluginClient{config: sp.config}).QueryPlugin(sp)
}

// QueryProperties queries the "properties" edge of the StoragePlugin entity.
func (sp *StoragePlugin) QueryProperties() *StoragePluginPropertyQuery {
	return (&StoragePluginClient{config: sp.config}).QueryProperties(sp)
}

// Update returns a builder for updating this StoragePlugin.
// Note that you need to call StoragePlugin.Unwrap() before calling this method if this StoragePlugin
// was returned from a transaction, and the transaction was committed or rolled back.
func (sp *StoragePlugin) Update() *StoragePluginUpdateOne {
	return (&StoragePluginClient{config: sp.config}).UpdateOne(sp)
}

// Unwrap unwraps the StoragePlugin entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sp *StoragePlugin) Unwrap() *StoragePlugin {
	tx, ok := sp.config.driver.(*txDriver)
	if !ok {
		panic("ent: StoragePlugin is not a transactional entity")
	}
	sp.config.driver = tx.drv
	return sp
}

// String implements the fmt.Stringer.
func (sp *StoragePlugin) String() string {
	var builder strings.Builder
	builder.WriteString("StoragePlugin(")
	builder.WriteString(fmt.Sprintf("id=%v", sp.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(sp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(sp.UpdatedAt.Format(time.ANSIC))
	if v := sp.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", disable=")
	builder.WriteString(fmt.Sprintf("%v", sp.Disable))
	builder.WriteByte(')')
	return builder.String()
}

// StoragePlugins is a parsable slice of StoragePlugin.
type StoragePlugins []*StoragePlugin

func (sp StoragePlugins) config(cfg config) {
	for _i := range sp {
		sp[_i].config = cfg
	}
}
