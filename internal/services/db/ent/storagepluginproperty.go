// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/khorevaa/r2gitsync/internal/services/db/ent/storageplugin"
	"github.com/khorevaa/r2gitsync/internal/services/db/ent/storagepluginproperty"
)

// StoragePluginProperty is the model entity for the StoragePluginProperty schema.
type StoragePluginProperty struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StoragePluginPropertyQuery when eager-loading is set.
	Edges                     StoragePluginPropertyEdges `json:"edges"`
	storage_plugin_properties *uuid.UUID
}

// StoragePluginPropertyEdges holds the relations/edges for other nodes in the graph.
type StoragePluginPropertyEdges struct {
	// Plugin holds the value of the plugin edge.
	Plugin *StoragePlugin `json:"plugin,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PluginOrErr returns the Plugin value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StoragePluginPropertyEdges) PluginOrErr() (*StoragePlugin, error) {
	if e.loadedTypes[0] {
		if e.Plugin == nil {
			// The edge plugin was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: storageplugin.Label}
		}
		return e.Plugin, nil
	}
	return nil, &NotLoadedError{edge: "plugin"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StoragePluginProperty) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case storagepluginproperty.FieldName, storagepluginproperty.FieldValue:
			values[i] = new(sql.NullString)
		case storagepluginproperty.FieldCreatedAt, storagepluginproperty.FieldUpdatedAt, storagepluginproperty.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case storagepluginproperty.FieldID:
			values[i] = new(uuid.UUID)
		case storagepluginproperty.ForeignKeys[0]: // storage_plugin_properties
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type StoragePluginProperty", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StoragePluginProperty fields.
func (spp *StoragePluginProperty) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case storagepluginproperty.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				spp.ID = *value
			}
		case storagepluginproperty.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				spp.CreatedAt = value.Time
			}
		case storagepluginproperty.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				spp.UpdatedAt = value.Time
			}
		case storagepluginproperty.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				spp.DeletedAt = new(time.Time)
				*spp.DeletedAt = value.Time
			}
		case storagepluginproperty.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				spp.Name = value.String
			}
		case storagepluginproperty.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				spp.Value = value.String
			}
		case storagepluginproperty.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field storage_plugin_properties", values[i])
			} else if value.Valid {
				spp.storage_plugin_properties = new(uuid.UUID)
				*spp.storage_plugin_properties = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryPlugin queries the "plugin" edge of the StoragePluginProperty entity.
func (spp *StoragePluginProperty) QueryPlugin() *StoragePluginQuery {
	return (&StoragePluginPropertyClient{config: spp.config}).QueryPlugin(spp)
}

// Update returns a builder for updating this StoragePluginProperty.
// Note that you need to call StoragePluginProperty.Unwrap() before calling this method if this StoragePluginProperty
// was returned from a transaction, and the transaction was committed or rolled back.
func (spp *StoragePluginProperty) Update() *StoragePluginPropertyUpdateOne {
	return (&StoragePluginPropertyClient{config: spp.config}).UpdateOne(spp)
}

// Unwrap unwraps the StoragePluginProperty entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (spp *StoragePluginProperty) Unwrap() *StoragePluginProperty {
	tx, ok := spp.config.driver.(*txDriver)
	if !ok {
		panic("ent: StoragePluginProperty is not a transactional entity")
	}
	spp.config.driver = tx.drv
	return spp
}

// String implements the fmt.Stringer.
func (spp *StoragePluginProperty) String() string {
	var builder strings.Builder
	builder.WriteString("StoragePluginProperty(")
	builder.WriteString(fmt.Sprintf("id=%v", spp.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(spp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(spp.UpdatedAt.Format(time.ANSIC))
	if v := spp.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", name=")
	builder.WriteString(spp.Name)
	builder.WriteString(", value=")
	builder.WriteString(spp.Value)
	builder.WriteByte(')')
	return builder.String()
}

// StoragePluginProperties is a parsable slice of StoragePluginProperty.
type StoragePluginProperties []*StoragePluginProperty

func (spp StoragePluginProperties) config(cfg config) {
	for _i := range spp {
		spp[_i].config = cfg
	}
}
