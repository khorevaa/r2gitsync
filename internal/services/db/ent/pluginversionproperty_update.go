// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/khorevaa/r2gitsync/internal/services/db/ent/plugin"
	"github.com/khorevaa/r2gitsync/internal/services/db/ent/pluginversion"
	"github.com/khorevaa/r2gitsync/internal/services/db/ent/pluginversionproperty"
	"github.com/khorevaa/r2gitsync/internal/services/db/ent/predicate"
)

// PluginVersionPropertyUpdate is the builder for updating PluginVersionProperty entities.
type PluginVersionPropertyUpdate struct {
	config
	hooks    []Hook
	mutation *PluginVersionPropertyMutation
}

// Where appends a list predicates to the PluginVersionPropertyUpdate builder.
func (pvpu *PluginVersionPropertyUpdate) Where(ps ...predicate.PluginVersionProperty) *PluginVersionPropertyUpdate {
	pvpu.mutation.Where(ps...)
	return pvpu
}

// SetUpdatedAt sets the "updated_at" field.
func (pvpu *PluginVersionPropertyUpdate) SetUpdatedAt(t time.Time) *PluginVersionPropertyUpdate {
	pvpu.mutation.SetUpdatedAt(t)
	return pvpu
}

// SetDeletedAt sets the "deleted_at" field.
func (pvpu *PluginVersionPropertyUpdate) SetDeletedAt(t time.Time) *PluginVersionPropertyUpdate {
	pvpu.mutation.SetDeletedAt(t)
	return pvpu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pvpu *PluginVersionPropertyUpdate) SetNillableDeletedAt(t *time.Time) *PluginVersionPropertyUpdate {
	if t != nil {
		pvpu.SetDeletedAt(*t)
	}
	return pvpu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pvpu *PluginVersionPropertyUpdate) ClearDeletedAt() *PluginVersionPropertyUpdate {
	pvpu.mutation.ClearDeletedAt()
	return pvpu
}

// SetName sets the "name" field.
func (pvpu *PluginVersionPropertyUpdate) SetName(s string) *PluginVersionPropertyUpdate {
	pvpu.mutation.SetName(s)
	return pvpu
}

// SetDefault sets the "default" field.
func (pvpu *PluginVersionPropertyUpdate) SetDefault(s string) *PluginVersionPropertyUpdate {
	pvpu.mutation.SetDefault(s)
	return pvpu
}

// SetRequired sets the "required" field.
func (pvpu *PluginVersionPropertyUpdate) SetRequired(b bool) *PluginVersionPropertyUpdate {
	pvpu.mutation.SetRequired(b)
	return pvpu
}

// SetType sets the "type" field.
func (pvpu *PluginVersionPropertyUpdate) SetType(pl pluginversionproperty.Type) *PluginVersionPropertyUpdate {
	pvpu.mutation.SetType(pl)
	return pvpu
}

// SetPluginID sets the "plugin" edge to the Plugin entity by ID.
func (pvpu *PluginVersionPropertyUpdate) SetPluginID(id uuid.UUID) *PluginVersionPropertyUpdate {
	pvpu.mutation.SetPluginID(id)
	return pvpu
}

// SetPlugin sets the "plugin" edge to the Plugin entity.
func (pvpu *PluginVersionPropertyUpdate) SetPlugin(p *Plugin) *PluginVersionPropertyUpdate {
	return pvpu.SetPluginID(p.ID)
}

// SetVersionID sets the "version" edge to the PluginVersion entity by ID.
func (pvpu *PluginVersionPropertyUpdate) SetVersionID(id uuid.UUID) *PluginVersionPropertyUpdate {
	pvpu.mutation.SetVersionID(id)
	return pvpu
}

// SetVersion sets the "version" edge to the PluginVersion entity.
func (pvpu *PluginVersionPropertyUpdate) SetVersion(p *PluginVersion) *PluginVersionPropertyUpdate {
	return pvpu.SetVersionID(p.ID)
}

// Mutation returns the PluginVersionPropertyMutation object of the builder.
func (pvpu *PluginVersionPropertyUpdate) Mutation() *PluginVersionPropertyMutation {
	return pvpu.mutation
}

// ClearPlugin clears the "plugin" edge to the Plugin entity.
func (pvpu *PluginVersionPropertyUpdate) ClearPlugin() *PluginVersionPropertyUpdate {
	pvpu.mutation.ClearPlugin()
	return pvpu
}

// ClearVersion clears the "version" edge to the PluginVersion entity.
func (pvpu *PluginVersionPropertyUpdate) ClearVersion() *PluginVersionPropertyUpdate {
	pvpu.mutation.ClearVersion()
	return pvpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pvpu *PluginVersionPropertyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pvpu.defaults()
	if len(pvpu.hooks) == 0 {
		if err = pvpu.check(); err != nil {
			return 0, err
		}
		affected, err = pvpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PluginVersionPropertyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pvpu.check(); err != nil {
				return 0, err
			}
			pvpu.mutation = mutation
			affected, err = pvpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pvpu.hooks) - 1; i >= 0; i-- {
			if pvpu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pvpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pvpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pvpu *PluginVersionPropertyUpdate) SaveX(ctx context.Context) int {
	affected, err := pvpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pvpu *PluginVersionPropertyUpdate) Exec(ctx context.Context) error {
	_, err := pvpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvpu *PluginVersionPropertyUpdate) ExecX(ctx context.Context) {
	if err := pvpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pvpu *PluginVersionPropertyUpdate) defaults() {
	if _, ok := pvpu.mutation.UpdatedAt(); !ok {
		v := pluginversionproperty.UpdateDefaultUpdatedAt()
		pvpu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pvpu *PluginVersionPropertyUpdate) check() error {
	if v, ok := pvpu.mutation.Name(); ok {
		if err := pluginversionproperty.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "PluginVersionProperty.name": %w`, err)}
		}
	}
	if v, ok := pvpu.mutation.Default(); ok {
		if err := pluginversionproperty.DefaultValidator(v); err != nil {
			return &ValidationError{Name: "default", err: fmt.Errorf(`ent: validator failed for field "PluginVersionProperty.default": %w`, err)}
		}
	}
	if v, ok := pvpu.mutation.GetType(); ok {
		if err := pluginversionproperty.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "PluginVersionProperty.type": %w`, err)}
		}
	}
	if _, ok := pvpu.mutation.PluginID(); pvpu.mutation.PluginCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PluginVersionProperty.plugin"`)
	}
	if _, ok := pvpu.mutation.VersionID(); pvpu.mutation.VersionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PluginVersionProperty.version"`)
	}
	return nil
}

func (pvpu *PluginVersionPropertyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pluginversionproperty.Table,
			Columns: pluginversionproperty.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: pluginversionproperty.FieldID,
			},
		},
	}
	if ps := pvpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pvpu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pluginversionproperty.FieldUpdatedAt,
		})
	}
	if value, ok := pvpu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pluginversionproperty.FieldDeletedAt,
		})
	}
	if pvpu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: pluginversionproperty.FieldDeletedAt,
		})
	}
	if value, ok := pvpu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pluginversionproperty.FieldName,
		})
	}
	if value, ok := pvpu.mutation.Default(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pluginversionproperty.FieldDefault,
		})
	}
	if value, ok := pvpu.mutation.Required(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: pluginversionproperty.FieldRequired,
		})
	}
	if value, ok := pvpu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: pluginversionproperty.FieldType,
		})
	}
	if pvpu.mutation.PluginCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pluginversionproperty.PluginTable,
			Columns: []string{pluginversionproperty.PluginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plugin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvpu.mutation.PluginIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pluginversionproperty.PluginTable,
			Columns: []string{pluginversionproperty.PluginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plugin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pvpu.mutation.VersionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pluginversionproperty.VersionTable,
			Columns: []string{pluginversionproperty.VersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: pluginversion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvpu.mutation.VersionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pluginversionproperty.VersionTable,
			Columns: []string{pluginversionproperty.VersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: pluginversion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pvpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pluginversionproperty.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// PluginVersionPropertyUpdateOne is the builder for updating a single PluginVersionProperty entity.
type PluginVersionPropertyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PluginVersionPropertyMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (pvpuo *PluginVersionPropertyUpdateOne) SetUpdatedAt(t time.Time) *PluginVersionPropertyUpdateOne {
	pvpuo.mutation.SetUpdatedAt(t)
	return pvpuo
}

// SetDeletedAt sets the "deleted_at" field.
func (pvpuo *PluginVersionPropertyUpdateOne) SetDeletedAt(t time.Time) *PluginVersionPropertyUpdateOne {
	pvpuo.mutation.SetDeletedAt(t)
	return pvpuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pvpuo *PluginVersionPropertyUpdateOne) SetNillableDeletedAt(t *time.Time) *PluginVersionPropertyUpdateOne {
	if t != nil {
		pvpuo.SetDeletedAt(*t)
	}
	return pvpuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pvpuo *PluginVersionPropertyUpdateOne) ClearDeletedAt() *PluginVersionPropertyUpdateOne {
	pvpuo.mutation.ClearDeletedAt()
	return pvpuo
}

// SetName sets the "name" field.
func (pvpuo *PluginVersionPropertyUpdateOne) SetName(s string) *PluginVersionPropertyUpdateOne {
	pvpuo.mutation.SetName(s)
	return pvpuo
}

// SetDefault sets the "default" field.
func (pvpuo *PluginVersionPropertyUpdateOne) SetDefault(s string) *PluginVersionPropertyUpdateOne {
	pvpuo.mutation.SetDefault(s)
	return pvpuo
}

// SetRequired sets the "required" field.
func (pvpuo *PluginVersionPropertyUpdateOne) SetRequired(b bool) *PluginVersionPropertyUpdateOne {
	pvpuo.mutation.SetRequired(b)
	return pvpuo
}

// SetType sets the "type" field.
func (pvpuo *PluginVersionPropertyUpdateOne) SetType(pl pluginversionproperty.Type) *PluginVersionPropertyUpdateOne {
	pvpuo.mutation.SetType(pl)
	return pvpuo
}

// SetPluginID sets the "plugin" edge to the Plugin entity by ID.
func (pvpuo *PluginVersionPropertyUpdateOne) SetPluginID(id uuid.UUID) *PluginVersionPropertyUpdateOne {
	pvpuo.mutation.SetPluginID(id)
	return pvpuo
}

// SetPlugin sets the "plugin" edge to the Plugin entity.
func (pvpuo *PluginVersionPropertyUpdateOne) SetPlugin(p *Plugin) *PluginVersionPropertyUpdateOne {
	return pvpuo.SetPluginID(p.ID)
}

// SetVersionID sets the "version" edge to the PluginVersion entity by ID.
func (pvpuo *PluginVersionPropertyUpdateOne) SetVersionID(id uuid.UUID) *PluginVersionPropertyUpdateOne {
	pvpuo.mutation.SetVersionID(id)
	return pvpuo
}

// SetVersion sets the "version" edge to the PluginVersion entity.
func (pvpuo *PluginVersionPropertyUpdateOne) SetVersion(p *PluginVersion) *PluginVersionPropertyUpdateOne {
	return pvpuo.SetVersionID(p.ID)
}

// Mutation returns the PluginVersionPropertyMutation object of the builder.
func (pvpuo *PluginVersionPropertyUpdateOne) Mutation() *PluginVersionPropertyMutation {
	return pvpuo.mutation
}

// ClearPlugin clears the "plugin" edge to the Plugin entity.
func (pvpuo *PluginVersionPropertyUpdateOne) ClearPlugin() *PluginVersionPropertyUpdateOne {
	pvpuo.mutation.ClearPlugin()
	return pvpuo
}

// ClearVersion clears the "version" edge to the PluginVersion entity.
func (pvpuo *PluginVersionPropertyUpdateOne) ClearVersion() *PluginVersionPropertyUpdateOne {
	pvpuo.mutation.ClearVersion()
	return pvpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pvpuo *PluginVersionPropertyUpdateOne) Select(field string, fields ...string) *PluginVersionPropertyUpdateOne {
	pvpuo.fields = append([]string{field}, fields...)
	return pvpuo
}

// Save executes the query and returns the updated PluginVersionProperty entity.
func (pvpuo *PluginVersionPropertyUpdateOne) Save(ctx context.Context) (*PluginVersionProperty, error) {
	var (
		err  error
		node *PluginVersionProperty
	)
	pvpuo.defaults()
	if len(pvpuo.hooks) == 0 {
		if err = pvpuo.check(); err != nil {
			return nil, err
		}
		node, err = pvpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PluginVersionPropertyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pvpuo.check(); err != nil {
				return nil, err
			}
			pvpuo.mutation = mutation
			node, err = pvpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pvpuo.hooks) - 1; i >= 0; i-- {
			if pvpuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pvpuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pvpuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pvpuo *PluginVersionPropertyUpdateOne) SaveX(ctx context.Context) *PluginVersionProperty {
	node, err := pvpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pvpuo *PluginVersionPropertyUpdateOne) Exec(ctx context.Context) error {
	_, err := pvpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvpuo *PluginVersionPropertyUpdateOne) ExecX(ctx context.Context) {
	if err := pvpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pvpuo *PluginVersionPropertyUpdateOne) defaults() {
	if _, ok := pvpuo.mutation.UpdatedAt(); !ok {
		v := pluginversionproperty.UpdateDefaultUpdatedAt()
		pvpuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pvpuo *PluginVersionPropertyUpdateOne) check() error {
	if v, ok := pvpuo.mutation.Name(); ok {
		if err := pluginversionproperty.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "PluginVersionProperty.name": %w`, err)}
		}
	}
	if v, ok := pvpuo.mutation.Default(); ok {
		if err := pluginversionproperty.DefaultValidator(v); err != nil {
			return &ValidationError{Name: "default", err: fmt.Errorf(`ent: validator failed for field "PluginVersionProperty.default": %w`, err)}
		}
	}
	if v, ok := pvpuo.mutation.GetType(); ok {
		if err := pluginversionproperty.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "PluginVersionProperty.type": %w`, err)}
		}
	}
	if _, ok := pvpuo.mutation.PluginID(); pvpuo.mutation.PluginCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PluginVersionProperty.plugin"`)
	}
	if _, ok := pvpuo.mutation.VersionID(); pvpuo.mutation.VersionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PluginVersionProperty.version"`)
	}
	return nil
}

func (pvpuo *PluginVersionPropertyUpdateOne) sqlSave(ctx context.Context) (_node *PluginVersionProperty, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pluginversionproperty.Table,
			Columns: pluginversionproperty.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: pluginversionproperty.FieldID,
			},
		},
	}
	id, ok := pvpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PluginVersionProperty.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pvpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pluginversionproperty.FieldID)
		for _, f := range fields {
			if !pluginversionproperty.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pluginversionproperty.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pvpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pvpuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pluginversionproperty.FieldUpdatedAt,
		})
	}
	if value, ok := pvpuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pluginversionproperty.FieldDeletedAt,
		})
	}
	if pvpuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: pluginversionproperty.FieldDeletedAt,
		})
	}
	if value, ok := pvpuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pluginversionproperty.FieldName,
		})
	}
	if value, ok := pvpuo.mutation.Default(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pluginversionproperty.FieldDefault,
		})
	}
	if value, ok := pvpuo.mutation.Required(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: pluginversionproperty.FieldRequired,
		})
	}
	if value, ok := pvpuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: pluginversionproperty.FieldType,
		})
	}
	if pvpuo.mutation.PluginCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pluginversionproperty.PluginTable,
			Columns: []string{pluginversionproperty.PluginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plugin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvpuo.mutation.PluginIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pluginversionproperty.PluginTable,
			Columns: []string{pluginversionproperty.PluginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plugin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pvpuo.mutation.VersionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pluginversionproperty.VersionTable,
			Columns: []string{pluginversionproperty.VersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: pluginversion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvpuo.mutation.VersionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pluginversionproperty.VersionTable,
			Columns: []string{pluginversionproperty.VersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: pluginversion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PluginVersionProperty{config: pvpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pvpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pluginversionproperty.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
