// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/khorevaa/r2gitsync/internal/services/db/ent/predicate"
	"github.com/khorevaa/r2gitsync/internal/services/db/ent/storage"
	"github.com/khorevaa/r2gitsync/internal/services/db/ent/storagecommit"
)

// StorageCommitUpdate is the builder for updating StorageCommit entities.
type StorageCommitUpdate struct {
	config
	hooks    []Hook
	mutation *StorageCommitMutation
}

// Where appends a list predicates to the StorageCommitUpdate builder.
func (scu *StorageCommitUpdate) Where(ps ...predicate.StorageCommit) *StorageCommitUpdate {
	scu.mutation.Where(ps...)
	return scu
}

// SetUpdatedAt sets the "updated_at" field.
func (scu *StorageCommitUpdate) SetUpdatedAt(t time.Time) *StorageCommitUpdate {
	scu.mutation.SetUpdatedAt(t)
	return scu
}

// SetDeletedAt sets the "deleted_at" field.
func (scu *StorageCommitUpdate) SetDeletedAt(t time.Time) *StorageCommitUpdate {
	scu.mutation.SetDeletedAt(t)
	return scu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (scu *StorageCommitUpdate) SetNillableDeletedAt(t *time.Time) *StorageCommitUpdate {
	if t != nil {
		scu.SetDeletedAt(*t)
	}
	return scu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (scu *StorageCommitUpdate) ClearDeletedAt() *StorageCommitUpdate {
	scu.mutation.ClearDeletedAt()
	return scu
}

// SetNumber sets the "number" field.
func (scu *StorageCommitUpdate) SetNumber(u uint) *StorageCommitUpdate {
	scu.mutation.ResetNumber()
	scu.mutation.SetNumber(u)
	return scu
}

// AddNumber adds u to the "number" field.
func (scu *StorageCommitUpdate) AddNumber(u int) *StorageCommitUpdate {
	scu.mutation.AddNumber(u)
	return scu
}

// SetConfigurationVersion sets the "configuration_version" field.
func (scu *StorageCommitUpdate) SetConfigurationVersion(s string) *StorageCommitUpdate {
	scu.mutation.SetConfigurationVersion(s)
	return scu
}

// SetAuthor sets the "author" field.
func (scu *StorageCommitUpdate) SetAuthor(s string) *StorageCommitUpdate {
	scu.mutation.SetAuthor(s)
	return scu
}

// SetDescription sets the "description" field.
func (scu *StorageCommitUpdate) SetDescription(s string) *StorageCommitUpdate {
	scu.mutation.SetDescription(s)
	return scu
}

// SetTag sets the "tag" field.
func (scu *StorageCommitUpdate) SetTag(s string) *StorageCommitUpdate {
	scu.mutation.SetTag(s)
	return scu
}

// SetTagDescription sets the "tag_description" field.
func (scu *StorageCommitUpdate) SetTagDescription(s string) *StorageCommitUpdate {
	scu.mutation.SetTagDescription(s)
	return scu
}

// SetCommitAt sets the "commit_at" field.
func (scu *StorageCommitUpdate) SetCommitAt(t time.Time) *StorageCommitUpdate {
	scu.mutation.SetCommitAt(t)
	return scu
}

// SetStorageID sets the "storage" edge to the Storage entity by ID.
func (scu *StorageCommitUpdate) SetStorageID(id uuid.UUID) *StorageCommitUpdate {
	scu.mutation.SetStorageID(id)
	return scu
}

// SetStorage sets the "storage" edge to the Storage entity.
func (scu *StorageCommitUpdate) SetStorage(s *Storage) *StorageCommitUpdate {
	return scu.SetStorageID(s.ID)
}

// Mutation returns the StorageCommitMutation object of the builder.
func (scu *StorageCommitUpdate) Mutation() *StorageCommitMutation {
	return scu.mutation
}

// ClearStorage clears the "storage" edge to the Storage entity.
func (scu *StorageCommitUpdate) ClearStorage() *StorageCommitUpdate {
	scu.mutation.ClearStorage()
	return scu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (scu *StorageCommitUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	scu.defaults()
	if len(scu.hooks) == 0 {
		if err = scu.check(); err != nil {
			return 0, err
		}
		affected, err = scu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StorageCommitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = scu.check(); err != nil {
				return 0, err
			}
			scu.mutation = mutation
			affected, err = scu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(scu.hooks) - 1; i >= 0; i-- {
			if scu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = scu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, scu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (scu *StorageCommitUpdate) SaveX(ctx context.Context) int {
	affected, err := scu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (scu *StorageCommitUpdate) Exec(ctx context.Context) error {
	_, err := scu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scu *StorageCommitUpdate) ExecX(ctx context.Context) {
	if err := scu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scu *StorageCommitUpdate) defaults() {
	if _, ok := scu.mutation.UpdatedAt(); !ok {
		v := storagecommit.UpdateDefaultUpdatedAt()
		scu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scu *StorageCommitUpdate) check() error {
	if v, ok := scu.mutation.Number(); ok {
		if err := storagecommit.NumberValidator(v); err != nil {
			return &ValidationError{Name: "number", err: fmt.Errorf(`ent: validator failed for field "StorageCommit.number": %w`, err)}
		}
	}
	if _, ok := scu.mutation.StorageID(); scu.mutation.StorageCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "StorageCommit.storage"`)
	}
	return nil
}

func (scu *StorageCommitUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   storagecommit.Table,
			Columns: storagecommit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: storagecommit.FieldID,
			},
		},
	}
	if ps := scu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: storagecommit.FieldUpdatedAt,
		})
	}
	if value, ok := scu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: storagecommit.FieldDeletedAt,
		})
	}
	if scu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: storagecommit.FieldDeletedAt,
		})
	}
	if value, ok := scu.mutation.Number(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: storagecommit.FieldNumber,
		})
	}
	if value, ok := scu.mutation.AddedNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: storagecommit.FieldNumber,
		})
	}
	if value, ok := scu.mutation.ConfigurationVersion(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: storagecommit.FieldConfigurationVersion,
		})
	}
	if value, ok := scu.mutation.Author(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: storagecommit.FieldAuthor,
		})
	}
	if value, ok := scu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: storagecommit.FieldDescription,
		})
	}
	if value, ok := scu.mutation.Tag(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: storagecommit.FieldTag,
		})
	}
	if value, ok := scu.mutation.TagDescription(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: storagecommit.FieldTagDescription,
		})
	}
	if value, ok := scu.mutation.CommitAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: storagecommit.FieldCommitAt,
		})
	}
	if scu.mutation.StorageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   storagecommit.StorageTable,
			Columns: []string{storagecommit.StorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: storage.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.StorageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   storagecommit.StorageTable,
			Columns: []string{storagecommit.StorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: storage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, scu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{storagecommit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// StorageCommitUpdateOne is the builder for updating a single StorageCommit entity.
type StorageCommitUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StorageCommitMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (scuo *StorageCommitUpdateOne) SetUpdatedAt(t time.Time) *StorageCommitUpdateOne {
	scuo.mutation.SetUpdatedAt(t)
	return scuo
}

// SetDeletedAt sets the "deleted_at" field.
func (scuo *StorageCommitUpdateOne) SetDeletedAt(t time.Time) *StorageCommitUpdateOne {
	scuo.mutation.SetDeletedAt(t)
	return scuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (scuo *StorageCommitUpdateOne) SetNillableDeletedAt(t *time.Time) *StorageCommitUpdateOne {
	if t != nil {
		scuo.SetDeletedAt(*t)
	}
	return scuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (scuo *StorageCommitUpdateOne) ClearDeletedAt() *StorageCommitUpdateOne {
	scuo.mutation.ClearDeletedAt()
	return scuo
}

// SetNumber sets the "number" field.
func (scuo *StorageCommitUpdateOne) SetNumber(u uint) *StorageCommitUpdateOne {
	scuo.mutation.ResetNumber()
	scuo.mutation.SetNumber(u)
	return scuo
}

// AddNumber adds u to the "number" field.
func (scuo *StorageCommitUpdateOne) AddNumber(u int) *StorageCommitUpdateOne {
	scuo.mutation.AddNumber(u)
	return scuo
}

// SetConfigurationVersion sets the "configuration_version" field.
func (scuo *StorageCommitUpdateOne) SetConfigurationVersion(s string) *StorageCommitUpdateOne {
	scuo.mutation.SetConfigurationVersion(s)
	return scuo
}

// SetAuthor sets the "author" field.
func (scuo *StorageCommitUpdateOne) SetAuthor(s string) *StorageCommitUpdateOne {
	scuo.mutation.SetAuthor(s)
	return scuo
}

// SetDescription sets the "description" field.
func (scuo *StorageCommitUpdateOne) SetDescription(s string) *StorageCommitUpdateOne {
	scuo.mutation.SetDescription(s)
	return scuo
}

// SetTag sets the "tag" field.
func (scuo *StorageCommitUpdateOne) SetTag(s string) *StorageCommitUpdateOne {
	scuo.mutation.SetTag(s)
	return scuo
}

// SetTagDescription sets the "tag_description" field.
func (scuo *StorageCommitUpdateOne) SetTagDescription(s string) *StorageCommitUpdateOne {
	scuo.mutation.SetTagDescription(s)
	return scuo
}

// SetCommitAt sets the "commit_at" field.
func (scuo *StorageCommitUpdateOne) SetCommitAt(t time.Time) *StorageCommitUpdateOne {
	scuo.mutation.SetCommitAt(t)
	return scuo
}

// SetStorageID sets the "storage" edge to the Storage entity by ID.
func (scuo *StorageCommitUpdateOne) SetStorageID(id uuid.UUID) *StorageCommitUpdateOne {
	scuo.mutation.SetStorageID(id)
	return scuo
}

// SetStorage sets the "storage" edge to the Storage entity.
func (scuo *StorageCommitUpdateOne) SetStorage(s *Storage) *StorageCommitUpdateOne {
	return scuo.SetStorageID(s.ID)
}

// Mutation returns the StorageCommitMutation object of the builder.
func (scuo *StorageCommitUpdateOne) Mutation() *StorageCommitMutation {
	return scuo.mutation
}

// ClearStorage clears the "storage" edge to the Storage entity.
func (scuo *StorageCommitUpdateOne) ClearStorage() *StorageCommitUpdateOne {
	scuo.mutation.ClearStorage()
	return scuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (scuo *StorageCommitUpdateOne) Select(field string, fields ...string) *StorageCommitUpdateOne {
	scuo.fields = append([]string{field}, fields...)
	return scuo
}

// Save executes the query and returns the updated StorageCommit entity.
func (scuo *StorageCommitUpdateOne) Save(ctx context.Context) (*StorageCommit, error) {
	var (
		err  error
		node *StorageCommit
	)
	scuo.defaults()
	if len(scuo.hooks) == 0 {
		if err = scuo.check(); err != nil {
			return nil, err
		}
		node, err = scuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StorageCommitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = scuo.check(); err != nil {
				return nil, err
			}
			scuo.mutation = mutation
			node, err = scuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(scuo.hooks) - 1; i >= 0; i-- {
			if scuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = scuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, scuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (scuo *StorageCommitUpdateOne) SaveX(ctx context.Context) *StorageCommit {
	node, err := scuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (scuo *StorageCommitUpdateOne) Exec(ctx context.Context) error {
	_, err := scuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scuo *StorageCommitUpdateOne) ExecX(ctx context.Context) {
	if err := scuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scuo *StorageCommitUpdateOne) defaults() {
	if _, ok := scuo.mutation.UpdatedAt(); !ok {
		v := storagecommit.UpdateDefaultUpdatedAt()
		scuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scuo *StorageCommitUpdateOne) check() error {
	if v, ok := scuo.mutation.Number(); ok {
		if err := storagecommit.NumberValidator(v); err != nil {
			return &ValidationError{Name: "number", err: fmt.Errorf(`ent: validator failed for field "StorageCommit.number": %w`, err)}
		}
	}
	if _, ok := scuo.mutation.StorageID(); scuo.mutation.StorageCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "StorageCommit.storage"`)
	}
	return nil
}

func (scuo *StorageCommitUpdateOne) sqlSave(ctx context.Context) (_node *StorageCommit, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   storagecommit.Table,
			Columns: storagecommit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: storagecommit.FieldID,
			},
		},
	}
	id, ok := scuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StorageCommit.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := scuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, storagecommit.FieldID)
		for _, f := range fields {
			if !storagecommit.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != storagecommit.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := scuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: storagecommit.FieldUpdatedAt,
		})
	}
	if value, ok := scuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: storagecommit.FieldDeletedAt,
		})
	}
	if scuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: storagecommit.FieldDeletedAt,
		})
	}
	if value, ok := scuo.mutation.Number(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: storagecommit.FieldNumber,
		})
	}
	if value, ok := scuo.mutation.AddedNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: storagecommit.FieldNumber,
		})
	}
	if value, ok := scuo.mutation.ConfigurationVersion(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: storagecommit.FieldConfigurationVersion,
		})
	}
	if value, ok := scuo.mutation.Author(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: storagecommit.FieldAuthor,
		})
	}
	if value, ok := scuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: storagecommit.FieldDescription,
		})
	}
	if value, ok := scuo.mutation.Tag(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: storagecommit.FieldTag,
		})
	}
	if value, ok := scuo.mutation.TagDescription(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: storagecommit.FieldTagDescription,
		})
	}
	if value, ok := scuo.mutation.CommitAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: storagecommit.FieldCommitAt,
		})
	}
	if scuo.mutation.StorageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   storagecommit.StorageTable,
			Columns: []string{storagecommit.StorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: storage.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.StorageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   storagecommit.StorageTable,
			Columns: []string{storagecommit.StorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: storage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &StorageCommit{config: scuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, scuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{storagecommit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
