// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/khorevaa/r2gitsync/internal/services/db/ent/project"
	"github.com/khorevaa/r2gitsync/internal/services/db/ent/storage"
)

// Project is the model entity for the Project schema.
type Project struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "Description" field.
	Description string `json:"Description,omitempty"`
	// Type holds the value of the "type" field.
	Type project.Type `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectQuery when eager-loading is set.
	Edges                   ProjectEdges `json:"edges"`
	project_master_storage  *uuid.UUID
	project_develop_storage *uuid.UUID
}

// ProjectEdges holds the relations/edges for other nodes in the graph.
type ProjectEdges struct {
	// Storages holds the value of the storages edge.
	Storages []*Storage `json:"storages,omitempty"`
	// MasterStorage holds the value of the master_storage edge.
	MasterStorage *Storage `json:"master_storage,omitempty"`
	// DevelopStorage holds the value of the develop_storage edge.
	DevelopStorage *Storage `json:"develop_storage,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// StoragesOrErr returns the Storages value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) StoragesOrErr() ([]*Storage, error) {
	if e.loadedTypes[0] {
		return e.Storages, nil
	}
	return nil, &NotLoadedError{edge: "storages"}
}

// MasterStorageOrErr returns the MasterStorage value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectEdges) MasterStorageOrErr() (*Storage, error) {
	if e.loadedTypes[1] {
		if e.MasterStorage == nil {
			// The edge master_storage was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: storage.Label}
		}
		return e.MasterStorage, nil
	}
	return nil, &NotLoadedError{edge: "master_storage"}
}

// DevelopStorageOrErr returns the DevelopStorage value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectEdges) DevelopStorageOrErr() (*Storage, error) {
	if e.loadedTypes[2] {
		if e.DevelopStorage == nil {
			// The edge develop_storage was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: storage.Label}
		}
		return e.DevelopStorage, nil
	}
	return nil, &NotLoadedError{edge: "develop_storage"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Project) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case project.FieldCode, project.FieldName, project.FieldDescription, project.FieldType:
			values[i] = new(sql.NullString)
		case project.FieldCreatedAt, project.FieldUpdatedAt, project.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case project.FieldID:
			values[i] = new(uuid.UUID)
		case project.ForeignKeys[0]: // project_master_storage
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case project.ForeignKeys[1]: // project_develop_storage
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Project", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Project fields.
func (pr *Project) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case project.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pr.ID = *value
			}
		case project.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		case project.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pr.UpdatedAt = value.Time
			}
		case project.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pr.DeletedAt = new(time.Time)
				*pr.DeletedAt = value.Time
			}
		case project.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				pr.Code = value.String
			}
		case project.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		case project.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Description", values[i])
			} else if value.Valid {
				pr.Description = value.String
			}
		case project.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				pr.Type = project.Type(value.String)
			}
		case project.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field project_master_storage", values[i])
			} else if value.Valid {
				pr.project_master_storage = new(uuid.UUID)
				*pr.project_master_storage = *value.S.(*uuid.UUID)
			}
		case project.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field project_develop_storage", values[i])
			} else if value.Valid {
				pr.project_develop_storage = new(uuid.UUID)
				*pr.project_develop_storage = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryStorages queries the "storages" edge of the Project entity.
func (pr *Project) QueryStorages() *StorageQuery {
	return (&ProjectClient{config: pr.config}).QueryStorages(pr)
}

// QueryMasterStorage queries the "master_storage" edge of the Project entity.
func (pr *Project) QueryMasterStorage() *StorageQuery {
	return (&ProjectClient{config: pr.config}).QueryMasterStorage(pr)
}

// QueryDevelopStorage queries the "develop_storage" edge of the Project entity.
func (pr *Project) QueryDevelopStorage() *StorageQuery {
	return (&ProjectClient{config: pr.config}).QueryDevelopStorage(pr)
}

// Update returns a builder for updating this Project.
// Note that you need to call Project.Unwrap() before calling this method if this Project
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Project) Update() *ProjectUpdateOne {
	return (&ProjectClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the Project entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Project) Unwrap() *Project {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Project is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Project) String() string {
	var builder strings.Builder
	builder.WriteString("Project(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(pr.UpdatedAt.Format(time.ANSIC))
	if v := pr.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", code=")
	builder.WriteString(pr.Code)
	builder.WriteString(", name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", Description=")
	builder.WriteString(pr.Description)
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", pr.Type))
	builder.WriteByte(')')
	return builder.String()
}

// Projects is a parsable slice of Project.
type Projects []*Project

func (pr Projects) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
