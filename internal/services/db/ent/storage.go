// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/khorevaa/r2gitsync/internal/services/db/ent/project"
	"github.com/khorevaa/r2gitsync/internal/services/db/ent/storage"
)

// Storage is the model entity for the Storage schema.
type Storage struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// ConnectionString holds the value of the "connection_string" field.
	ConnectionString string `json:"connection_string,omitempty"`
	// Develop holds the value of the "develop" field.
	Develop bool `json:"develop,omitempty"`
	// Extension holds the value of the "extension" field.
	Extension string `json:"extension,omitempty"`
	// Type holds the value of the "type" field.
	Type storage.Type `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StorageQuery when eager-loading is set.
	Edges            StorageEdges `json:"edges"`
	project_storages *uuid.UUID
	storage_parent   *uuid.UUID
}

// StorageEdges holds the relations/edges for other nodes in the graph.
type StorageEdges struct {
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// Parent holds the value of the parent edge.
	Parent *Storage `json:"parent,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StorageEdges) ProjectOrErr() (*Project, error) {
	if e.loadedTypes[0] {
		if e.Project == nil {
			// The edge project was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: project.Label}
		}
		return e.Project, nil
	}
	return nil, &NotLoadedError{edge: "project"}
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StorageEdges) ParentOrErr() (*Storage, error) {
	if e.loadedTypes[1] {
		if e.Parent == nil {
			// The edge parent was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: storage.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Storage) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case storage.FieldDevelop:
			values[i] = new(sql.NullBool)
		case storage.FieldConnectionString, storage.FieldExtension, storage.FieldType:
			values[i] = new(sql.NullString)
		case storage.FieldCreatedAt, storage.FieldUpdatedAt, storage.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case storage.FieldID:
			values[i] = new(uuid.UUID)
		case storage.ForeignKeys[0]: // project_storages
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case storage.ForeignKeys[1]: // storage_parent
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Storage", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Storage fields.
func (s *Storage) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case storage.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case storage.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case storage.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case storage.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				s.DeletedAt = new(time.Time)
				*s.DeletedAt = value.Time
			}
		case storage.FieldConnectionString:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field connection_string", values[i])
			} else if value.Valid {
				s.ConnectionString = value.String
			}
		case storage.FieldDevelop:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field develop", values[i])
			} else if value.Valid {
				s.Develop = value.Bool
			}
		case storage.FieldExtension:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field extension", values[i])
			} else if value.Valid {
				s.Extension = value.String
			}
		case storage.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				s.Type = storage.Type(value.String)
			}
		case storage.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field project_storages", values[i])
			} else if value.Valid {
				s.project_storages = new(uuid.UUID)
				*s.project_storages = *value.S.(*uuid.UUID)
			}
		case storage.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field storage_parent", values[i])
			} else if value.Valid {
				s.storage_parent = new(uuid.UUID)
				*s.storage_parent = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryProject queries the "project" edge of the Storage entity.
func (s *Storage) QueryProject() *ProjectQuery {
	return (&StorageClient{config: s.config}).QueryProject(s)
}

// QueryParent queries the "parent" edge of the Storage entity.
func (s *Storage) QueryParent() *StorageQuery {
	return (&StorageClient{config: s.config}).QueryParent(s)
}

// Update returns a builder for updating this Storage.
// Note that you need to call Storage.Unwrap() before calling this method if this Storage
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Storage) Update() *StorageUpdateOne {
	return (&StorageClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Storage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Storage) Unwrap() *Storage {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Storage is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Storage) String() string {
	var builder strings.Builder
	builder.WriteString("Storage(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	if v := s.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", connection_string=")
	builder.WriteString(s.ConnectionString)
	builder.WriteString(", develop=")
	builder.WriteString(fmt.Sprintf("%v", s.Develop))
	builder.WriteString(", extension=")
	builder.WriteString(s.Extension)
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", s.Type))
	builder.WriteByte(')')
	return builder.String()
}

// Storages is a parsable slice of Storage.
type Storages []*Storage

func (s Storages) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
