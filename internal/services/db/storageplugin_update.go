// Code generated by entc, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/khorevaa/r2gitsync/internal/services/db/pluginversion"
	"github.com/khorevaa/r2gitsync/internal/services/db/predicate"
	"github.com/khorevaa/r2gitsync/internal/services/db/storage"
	"github.com/khorevaa/r2gitsync/internal/services/db/storageplugin"
	"github.com/khorevaa/r2gitsync/internal/services/db/storagepluginproperty"
)

// StoragePluginUpdate is the builder for updating StoragePlugin entities.
type StoragePluginUpdate struct {
	config
	hooks    []Hook
	mutation *StoragePluginMutation
}

// Where appends a list predicates to the StoragePluginUpdate builder.
func (spu *StoragePluginUpdate) Where(ps ...predicate.StoragePlugin) *StoragePluginUpdate {
	spu.mutation.Where(ps...)
	return spu
}

// SetUpdatedAt sets the "updated_at" field.
func (spu *StoragePluginUpdate) SetUpdatedAt(t time.Time) *StoragePluginUpdate {
	spu.mutation.SetUpdatedAt(t)
	return spu
}

// SetDeletedAt sets the "deleted_at" field.
func (spu *StoragePluginUpdate) SetDeletedAt(t time.Time) *StoragePluginUpdate {
	spu.mutation.SetDeletedAt(t)
	return spu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (spu *StoragePluginUpdate) SetNillableDeletedAt(t *time.Time) *StoragePluginUpdate {
	if t != nil {
		spu.SetDeletedAt(*t)
	}
	return spu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (spu *StoragePluginUpdate) ClearDeletedAt() *StoragePluginUpdate {
	spu.mutation.ClearDeletedAt()
	return spu
}

// SetDisable sets the "disable" field.
func (spu *StoragePluginUpdate) SetDisable(b bool) *StoragePluginUpdate {
	spu.mutation.SetDisable(b)
	return spu
}

// SetStorageID sets the "storage" edge to the Storage entity by ID.
func (spu *StoragePluginUpdate) SetStorageID(id uuid.UUID) *StoragePluginUpdate {
	spu.mutation.SetStorageID(id)
	return spu
}

// SetStorage sets the "storage" edge to the Storage entity.
func (spu *StoragePluginUpdate) SetStorage(s *Storage) *StoragePluginUpdate {
	return spu.SetStorageID(s.ID)
}

// SetPluginID sets the "plugin" edge to the PluginVersion entity by ID.
func (spu *StoragePluginUpdate) SetPluginID(id uuid.UUID) *StoragePluginUpdate {
	spu.mutation.SetPluginID(id)
	return spu
}

// SetPlugin sets the "plugin" edge to the PluginVersion entity.
func (spu *StoragePluginUpdate) SetPlugin(p *PluginVersion) *StoragePluginUpdate {
	return spu.SetPluginID(p.ID)
}

// AddPropertyIDs adds the "properties" edge to the StoragePluginProperty entity by IDs.
func (spu *StoragePluginUpdate) AddPropertyIDs(ids ...uuid.UUID) *StoragePluginUpdate {
	spu.mutation.AddPropertyIDs(ids...)
	return spu
}

// AddProperties adds the "properties" edges to the StoragePluginProperty entity.
func (spu *StoragePluginUpdate) AddProperties(s ...*StoragePluginProperty) *StoragePluginUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spu.AddPropertyIDs(ids...)
}

// Mutation returns the StoragePluginMutation object of the builder.
func (spu *StoragePluginUpdate) Mutation() *StoragePluginMutation {
	return spu.mutation
}

// ClearStorage clears the "storage" edge to the Storage entity.
func (spu *StoragePluginUpdate) ClearStorage() *StoragePluginUpdate {
	spu.mutation.ClearStorage()
	return spu
}

// ClearPlugin clears the "plugin" edge to the PluginVersion entity.
func (spu *StoragePluginUpdate) ClearPlugin() *StoragePluginUpdate {
	spu.mutation.ClearPlugin()
	return spu
}

// ClearProperties clears all "properties" edges to the StoragePluginProperty entity.
func (spu *StoragePluginUpdate) ClearProperties() *StoragePluginUpdate {
	spu.mutation.ClearProperties()
	return spu
}

// RemovePropertyIDs removes the "properties" edge to StoragePluginProperty entities by IDs.
func (spu *StoragePluginUpdate) RemovePropertyIDs(ids ...uuid.UUID) *StoragePluginUpdate {
	spu.mutation.RemovePropertyIDs(ids...)
	return spu
}

// RemoveProperties removes "properties" edges to StoragePluginProperty entities.
func (spu *StoragePluginUpdate) RemoveProperties(s ...*StoragePluginProperty) *StoragePluginUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spu.RemovePropertyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (spu *StoragePluginUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	spu.defaults()
	if len(spu.hooks) == 0 {
		if err = spu.check(); err != nil {
			return 0, err
		}
		affected, err = spu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StoragePluginMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = spu.check(); err != nil {
				return 0, err
			}
			spu.mutation = mutation
			affected, err = spu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(spu.hooks) - 1; i >= 0; i-- {
			if spu.hooks[i] == nil {
				return 0, fmt.Errorf("db: uninitialized hook (forgotten import db/runtime?)")
			}
			mut = spu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, spu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (spu *StoragePluginUpdate) SaveX(ctx context.Context) int {
	affected, err := spu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (spu *StoragePluginUpdate) Exec(ctx context.Context) error {
	_, err := spu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spu *StoragePluginUpdate) ExecX(ctx context.Context) {
	if err := spu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spu *StoragePluginUpdate) defaults() {
	if _, ok := spu.mutation.UpdatedAt(); !ok {
		v := storageplugin.UpdateDefaultUpdatedAt()
		spu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spu *StoragePluginUpdate) check() error {
	if _, ok := spu.mutation.StorageID(); spu.mutation.StorageCleared() && !ok {
		return errors.New(`db: clearing a required unique edge "StoragePlugin.storage"`)
	}
	if _, ok := spu.mutation.PluginID(); spu.mutation.PluginCleared() && !ok {
		return errors.New(`db: clearing a required unique edge "StoragePlugin.plugin"`)
	}
	return nil
}

func (spu *StoragePluginUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   storageplugin.Table,
			Columns: storageplugin.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: storageplugin.FieldID,
			},
		},
	}
	if ps := spu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: storageplugin.FieldUpdatedAt,
		})
	}
	if value, ok := spu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: storageplugin.FieldDeletedAt,
		})
	}
	if spu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: storageplugin.FieldDeletedAt,
		})
	}
	if value, ok := spu.mutation.Disable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: storageplugin.FieldDisable,
		})
	}
	if spu.mutation.StorageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   storageplugin.StorageTable,
			Columns: []string{storageplugin.StorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: storage.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.StorageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   storageplugin.StorageTable,
			Columns: []string{storageplugin.StorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: storage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spu.mutation.PluginCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   storageplugin.PluginTable,
			Columns: []string{storageplugin.PluginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: pluginversion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.PluginIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   storageplugin.PluginTable,
			Columns: []string{storageplugin.PluginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: pluginversion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spu.mutation.PropertiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   storageplugin.PropertiesTable,
			Columns: []string{storageplugin.PropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: storagepluginproperty.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.RemovedPropertiesIDs(); len(nodes) > 0 && !spu.mutation.PropertiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   storageplugin.PropertiesTable,
			Columns: []string{storageplugin.PropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: storagepluginproperty.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.PropertiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   storageplugin.PropertiesTable,
			Columns: []string{storageplugin.PropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: storagepluginproperty.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, spu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{storageplugin.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// StoragePluginUpdateOne is the builder for updating a single StoragePlugin entity.
type StoragePluginUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StoragePluginMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (spuo *StoragePluginUpdateOne) SetUpdatedAt(t time.Time) *StoragePluginUpdateOne {
	spuo.mutation.SetUpdatedAt(t)
	return spuo
}

// SetDeletedAt sets the "deleted_at" field.
func (spuo *StoragePluginUpdateOne) SetDeletedAt(t time.Time) *StoragePluginUpdateOne {
	spuo.mutation.SetDeletedAt(t)
	return spuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (spuo *StoragePluginUpdateOne) SetNillableDeletedAt(t *time.Time) *StoragePluginUpdateOne {
	if t != nil {
		spuo.SetDeletedAt(*t)
	}
	return spuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (spuo *StoragePluginUpdateOne) ClearDeletedAt() *StoragePluginUpdateOne {
	spuo.mutation.ClearDeletedAt()
	return spuo
}

// SetDisable sets the "disable" field.
func (spuo *StoragePluginUpdateOne) SetDisable(b bool) *StoragePluginUpdateOne {
	spuo.mutation.SetDisable(b)
	return spuo
}

// SetStorageID sets the "storage" edge to the Storage entity by ID.
func (spuo *StoragePluginUpdateOne) SetStorageID(id uuid.UUID) *StoragePluginUpdateOne {
	spuo.mutation.SetStorageID(id)
	return spuo
}

// SetStorage sets the "storage" edge to the Storage entity.
func (spuo *StoragePluginUpdateOne) SetStorage(s *Storage) *StoragePluginUpdateOne {
	return spuo.SetStorageID(s.ID)
}

// SetPluginID sets the "plugin" edge to the PluginVersion entity by ID.
func (spuo *StoragePluginUpdateOne) SetPluginID(id uuid.UUID) *StoragePluginUpdateOne {
	spuo.mutation.SetPluginID(id)
	return spuo
}

// SetPlugin sets the "plugin" edge to the PluginVersion entity.
func (spuo *StoragePluginUpdateOne) SetPlugin(p *PluginVersion) *StoragePluginUpdateOne {
	return spuo.SetPluginID(p.ID)
}

// AddPropertyIDs adds the "properties" edge to the StoragePluginProperty entity by IDs.
func (spuo *StoragePluginUpdateOne) AddPropertyIDs(ids ...uuid.UUID) *StoragePluginUpdateOne {
	spuo.mutation.AddPropertyIDs(ids...)
	return spuo
}

// AddProperties adds the "properties" edges to the StoragePluginProperty entity.
func (spuo *StoragePluginUpdateOne) AddProperties(s ...*StoragePluginProperty) *StoragePluginUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spuo.AddPropertyIDs(ids...)
}

// Mutation returns the StoragePluginMutation object of the builder.
func (spuo *StoragePluginUpdateOne) Mutation() *StoragePluginMutation {
	return spuo.mutation
}

// ClearStorage clears the "storage" edge to the Storage entity.
func (spuo *StoragePluginUpdateOne) ClearStorage() *StoragePluginUpdateOne {
	spuo.mutation.ClearStorage()
	return spuo
}

// ClearPlugin clears the "plugin" edge to the PluginVersion entity.
func (spuo *StoragePluginUpdateOne) ClearPlugin() *StoragePluginUpdateOne {
	spuo.mutation.ClearPlugin()
	return spuo
}

// ClearProperties clears all "properties" edges to the StoragePluginProperty entity.
func (spuo *StoragePluginUpdateOne) ClearProperties() *StoragePluginUpdateOne {
	spuo.mutation.ClearProperties()
	return spuo
}

// RemovePropertyIDs removes the "properties" edge to StoragePluginProperty entities by IDs.
func (spuo *StoragePluginUpdateOne) RemovePropertyIDs(ids ...uuid.UUID) *StoragePluginUpdateOne {
	spuo.mutation.RemovePropertyIDs(ids...)
	return spuo
}

// RemoveProperties removes "properties" edges to StoragePluginProperty entities.
func (spuo *StoragePluginUpdateOne) RemoveProperties(s ...*StoragePluginProperty) *StoragePluginUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spuo.RemovePropertyIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (spuo *StoragePluginUpdateOne) Select(field string, fields ...string) *StoragePluginUpdateOne {
	spuo.fields = append([]string{field}, fields...)
	return spuo
}

// Save executes the query and returns the updated StoragePlugin entity.
func (spuo *StoragePluginUpdateOne) Save(ctx context.Context) (*StoragePlugin, error) {
	var (
		err  error
		node *StoragePlugin
	)
	spuo.defaults()
	if len(spuo.hooks) == 0 {
		if err = spuo.check(); err != nil {
			return nil, err
		}
		node, err = spuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StoragePluginMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = spuo.check(); err != nil {
				return nil, err
			}
			spuo.mutation = mutation
			node, err = spuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(spuo.hooks) - 1; i >= 0; i-- {
			if spuo.hooks[i] == nil {
				return nil, fmt.Errorf("db: uninitialized hook (forgotten import db/runtime?)")
			}
			mut = spuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, spuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (spuo *StoragePluginUpdateOne) SaveX(ctx context.Context) *StoragePlugin {
	node, err := spuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (spuo *StoragePluginUpdateOne) Exec(ctx context.Context) error {
	_, err := spuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spuo *StoragePluginUpdateOne) ExecX(ctx context.Context) {
	if err := spuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spuo *StoragePluginUpdateOne) defaults() {
	if _, ok := spuo.mutation.UpdatedAt(); !ok {
		v := storageplugin.UpdateDefaultUpdatedAt()
		spuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spuo *StoragePluginUpdateOne) check() error {
	if _, ok := spuo.mutation.StorageID(); spuo.mutation.StorageCleared() && !ok {
		return errors.New(`db: clearing a required unique edge "StoragePlugin.storage"`)
	}
	if _, ok := spuo.mutation.PluginID(); spuo.mutation.PluginCleared() && !ok {
		return errors.New(`db: clearing a required unique edge "StoragePlugin.plugin"`)
	}
	return nil
}

func (spuo *StoragePluginUpdateOne) sqlSave(ctx context.Context) (_node *StoragePlugin, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   storageplugin.Table,
			Columns: storageplugin.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: storageplugin.FieldID,
			},
		},
	}
	id, ok := spuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "StoragePlugin.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := spuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, storageplugin.FieldID)
		for _, f := range fields {
			if !storageplugin.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != storageplugin.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := spuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: storageplugin.FieldUpdatedAt,
		})
	}
	if value, ok := spuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: storageplugin.FieldDeletedAt,
		})
	}
	if spuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: storageplugin.FieldDeletedAt,
		})
	}
	if value, ok := spuo.mutation.Disable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: storageplugin.FieldDisable,
		})
	}
	if spuo.mutation.StorageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   storageplugin.StorageTable,
			Columns: []string{storageplugin.StorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: storage.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.StorageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   storageplugin.StorageTable,
			Columns: []string{storageplugin.StorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: storage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spuo.mutation.PluginCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   storageplugin.PluginTable,
			Columns: []string{storageplugin.PluginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: pluginversion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.PluginIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   storageplugin.PluginTable,
			Columns: []string{storageplugin.PluginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: pluginversion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spuo.mutation.PropertiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   storageplugin.PropertiesTable,
			Columns: []string{storageplugin.PropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: storagepluginproperty.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.RemovedPropertiesIDs(); len(nodes) > 0 && !spuo.mutation.PropertiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   storageplugin.PropertiesTable,
			Columns: []string{storageplugin.PropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: storagepluginproperty.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.PropertiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   storageplugin.PropertiesTable,
			Columns: []string{storageplugin.PropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: storagepluginproperty.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &StoragePlugin{config: spuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, spuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{storageplugin.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
