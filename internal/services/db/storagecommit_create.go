// Code generated by entc, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/khorevaa/r2gitsync/internal/services/db/storage"
	"github.com/khorevaa/r2gitsync/internal/services/db/storagecommit"
)

// StorageCommitCreate is the builder for creating a StorageCommit entity.
type StorageCommitCreate struct {
	config
	mutation *StorageCommitMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (scc *StorageCommitCreate) SetCreatedAt(t time.Time) *StorageCommitCreate {
	scc.mutation.SetCreatedAt(t)
	return scc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (scc *StorageCommitCreate) SetNillableCreatedAt(t *time.Time) *StorageCommitCreate {
	if t != nil {
		scc.SetCreatedAt(*t)
	}
	return scc
}

// SetUpdatedAt sets the "updated_at" field.
func (scc *StorageCommitCreate) SetUpdatedAt(t time.Time) *StorageCommitCreate {
	scc.mutation.SetUpdatedAt(t)
	return scc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (scc *StorageCommitCreate) SetNillableUpdatedAt(t *time.Time) *StorageCommitCreate {
	if t != nil {
		scc.SetUpdatedAt(*t)
	}
	return scc
}

// SetDeletedAt sets the "deleted_at" field.
func (scc *StorageCommitCreate) SetDeletedAt(t time.Time) *StorageCommitCreate {
	scc.mutation.SetDeletedAt(t)
	return scc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (scc *StorageCommitCreate) SetNillableDeletedAt(t *time.Time) *StorageCommitCreate {
	if t != nil {
		scc.SetDeletedAt(*t)
	}
	return scc
}

// SetNumber sets the "number" field.
func (scc *StorageCommitCreate) SetNumber(u uint) *StorageCommitCreate {
	scc.mutation.SetNumber(u)
	return scc
}

// SetConfigurationVersion sets the "configuration_version" field.
func (scc *StorageCommitCreate) SetConfigurationVersion(s string) *StorageCommitCreate {
	scc.mutation.SetConfigurationVersion(s)
	return scc
}

// SetAuthor sets the "author" field.
func (scc *StorageCommitCreate) SetAuthor(s string) *StorageCommitCreate {
	scc.mutation.SetAuthor(s)
	return scc
}

// SetDescription sets the "description" field.
func (scc *StorageCommitCreate) SetDescription(s string) *StorageCommitCreate {
	scc.mutation.SetDescription(s)
	return scc
}

// SetTag sets the "tag" field.
func (scc *StorageCommitCreate) SetTag(s string) *StorageCommitCreate {
	scc.mutation.SetTag(s)
	return scc
}

// SetTagDescription sets the "tag_description" field.
func (scc *StorageCommitCreate) SetTagDescription(s string) *StorageCommitCreate {
	scc.mutation.SetTagDescription(s)
	return scc
}

// SetCommitAt sets the "commit_at" field.
func (scc *StorageCommitCreate) SetCommitAt(t time.Time) *StorageCommitCreate {
	scc.mutation.SetCommitAt(t)
	return scc
}

// SetID sets the "id" field.
func (scc *StorageCommitCreate) SetID(u uuid.UUID) *StorageCommitCreate {
	scc.mutation.SetID(u)
	return scc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (scc *StorageCommitCreate) SetNillableID(u *uuid.UUID) *StorageCommitCreate {
	if u != nil {
		scc.SetID(*u)
	}
	return scc
}

// SetStorageID sets the "storage" edge to the Storage entity by ID.
func (scc *StorageCommitCreate) SetStorageID(id uuid.UUID) *StorageCommitCreate {
	scc.mutation.SetStorageID(id)
	return scc
}

// SetStorage sets the "storage" edge to the Storage entity.
func (scc *StorageCommitCreate) SetStorage(s *Storage) *StorageCommitCreate {
	return scc.SetStorageID(s.ID)
}

// Mutation returns the StorageCommitMutation object of the builder.
func (scc *StorageCommitCreate) Mutation() *StorageCommitMutation {
	return scc.mutation
}

// Save creates the StorageCommit in the database.
func (scc *StorageCommitCreate) Save(ctx context.Context) (*StorageCommit, error) {
	var (
		err  error
		node *StorageCommit
	)
	scc.defaults()
	if len(scc.hooks) == 0 {
		if err = scc.check(); err != nil {
			return nil, err
		}
		node, err = scc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StorageCommitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = scc.check(); err != nil {
				return nil, err
			}
			scc.mutation = mutation
			if node, err = scc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(scc.hooks) - 1; i >= 0; i-- {
			if scc.hooks[i] == nil {
				return nil, fmt.Errorf("db: uninitialized hook (forgotten import db/runtime?)")
			}
			mut = scc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, scc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (scc *StorageCommitCreate) SaveX(ctx context.Context) *StorageCommit {
	v, err := scc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scc *StorageCommitCreate) Exec(ctx context.Context) error {
	_, err := scc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scc *StorageCommitCreate) ExecX(ctx context.Context) {
	if err := scc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scc *StorageCommitCreate) defaults() {
	if _, ok := scc.mutation.CreatedAt(); !ok {
		v := storagecommit.DefaultCreatedAt()
		scc.mutation.SetCreatedAt(v)
	}
	if _, ok := scc.mutation.UpdatedAt(); !ok {
		v := storagecommit.DefaultUpdatedAt()
		scc.mutation.SetUpdatedAt(v)
	}
	if _, ok := scc.mutation.ID(); !ok {
		v := storagecommit.DefaultID()
		scc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scc *StorageCommitCreate) check() error {
	if _, ok := scc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "StorageCommit.created_at"`)}
	}
	if _, ok := scc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "StorageCommit.updated_at"`)}
	}
	if _, ok := scc.mutation.Number(); !ok {
		return &ValidationError{Name: "number", err: errors.New(`db: missing required field "StorageCommit.number"`)}
	}
	if v, ok := scc.mutation.Number(); ok {
		if err := storagecommit.NumberValidator(v); err != nil {
			return &ValidationError{Name: "number", err: fmt.Errorf(`db: validator failed for field "StorageCommit.number": %w`, err)}
		}
	}
	if _, ok := scc.mutation.ConfigurationVersion(); !ok {
		return &ValidationError{Name: "configuration_version", err: errors.New(`db: missing required field "StorageCommit.configuration_version"`)}
	}
	if _, ok := scc.mutation.Author(); !ok {
		return &ValidationError{Name: "author", err: errors.New(`db: missing required field "StorageCommit.author"`)}
	}
	if _, ok := scc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`db: missing required field "StorageCommit.description"`)}
	}
	if _, ok := scc.mutation.Tag(); !ok {
		return &ValidationError{Name: "tag", err: errors.New(`db: missing required field "StorageCommit.tag"`)}
	}
	if _, ok := scc.mutation.TagDescription(); !ok {
		return &ValidationError{Name: "tag_description", err: errors.New(`db: missing required field "StorageCommit.tag_description"`)}
	}
	if _, ok := scc.mutation.CommitAt(); !ok {
		return &ValidationError{Name: "commit_at", err: errors.New(`db: missing required field "StorageCommit.commit_at"`)}
	}
	if _, ok := scc.mutation.StorageID(); !ok {
		return &ValidationError{Name: "storage", err: errors.New(`db: missing required edge "StorageCommit.storage"`)}
	}
	return nil
}

func (scc *StorageCommitCreate) sqlSave(ctx context.Context) (*StorageCommit, error) {
	_node, _spec := scc.createSpec()
	if err := sqlgraph.CreateNode(ctx, scc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (scc *StorageCommitCreate) createSpec() (*StorageCommit, *sqlgraph.CreateSpec) {
	var (
		_node = &StorageCommit{config: scc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: storagecommit.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: storagecommit.FieldID,
			},
		}
	)
	if id, ok := scc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := scc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: storagecommit.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := scc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: storagecommit.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := scc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: storagecommit.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := scc.mutation.Number(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: storagecommit.FieldNumber,
		})
		_node.Number = value
	}
	if value, ok := scc.mutation.ConfigurationVersion(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: storagecommit.FieldConfigurationVersion,
		})
		_node.ConfigurationVersion = value
	}
	if value, ok := scc.mutation.Author(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: storagecommit.FieldAuthor,
		})
		_node.Author = value
	}
	if value, ok := scc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: storagecommit.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := scc.mutation.Tag(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: storagecommit.FieldTag,
		})
		_node.Tag = value
	}
	if value, ok := scc.mutation.TagDescription(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: storagecommit.FieldTagDescription,
		})
		_node.TagDescription = value
	}
	if value, ok := scc.mutation.CommitAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: storagecommit.FieldCommitAt,
		})
		_node.CommitAt = value
	}
	if nodes := scc.mutation.StorageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   storagecommit.StorageTable,
			Columns: []string{storagecommit.StorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: storage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.storage_commit_storage = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StorageCommitCreateBulk is the builder for creating many StorageCommit entities in bulk.
type StorageCommitCreateBulk struct {
	config
	builders []*StorageCommitCreate
}

// Save creates the StorageCommit entities in the database.
func (sccb *StorageCommitCreateBulk) Save(ctx context.Context) ([]*StorageCommit, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sccb.builders))
	nodes := make([]*StorageCommit, len(sccb.builders))
	mutators := make([]Mutator, len(sccb.builders))
	for i := range sccb.builders {
		func(i int, root context.Context) {
			builder := sccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StorageCommitMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sccb *StorageCommitCreateBulk) SaveX(ctx context.Context) []*StorageCommit {
	v, err := sccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sccb *StorageCommitCreateBulk) Exec(ctx context.Context) error {
	_, err := sccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sccb *StorageCommitCreateBulk) ExecX(ctx context.Context) {
	if err := sccb.Exec(ctx); err != nil {
		panic(err)
	}
}
