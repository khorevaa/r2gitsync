// Code generated by entc, DO NOT EDIT.

package storagepluginproperty

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the storagepluginproperty type in the database.
	Label = "storage_plugin_property"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// EdgePlugin holds the string denoting the plugin edge name in mutations.
	EdgePlugin = "plugin"
	// Table holds the table name of the storagepluginproperty in the database.
	Table = "storage_plugin_properties"
	// PluginTable is the table that holds the plugin relation/edge.
	PluginTable = "storage_plugin_properties"
	// PluginInverseTable is the table name for the StoragePlugin entity.
	// It exists in this package in order to avoid circular dependency with the "storageplugin" package.
	PluginInverseTable = "storage_plugins"
	// PluginColumn is the table column denoting the plugin relation/edge.
	PluginColumn = "storage_plugin_properties"
)

// Columns holds all SQL columns for storagepluginproperty fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldName,
	FieldValue,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "storage_plugin_properties"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"storage_plugin_properties",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
