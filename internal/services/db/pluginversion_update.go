// Code generated by entc, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/khorevaa/r2gitsync/internal/services/db/plugin"
	"github.com/khorevaa/r2gitsync/internal/services/db/pluginversion"
	"github.com/khorevaa/r2gitsync/internal/services/db/predicate"
)

// PluginVersionUpdate is the builder for updating PluginVersion entities.
type PluginVersionUpdate struct {
	config
	hooks    []Hook
	mutation *PluginVersionMutation
}

// Where appends a list predicates to the PluginVersionUpdate builder.
func (pvu *PluginVersionUpdate) Where(ps ...predicate.PluginVersion) *PluginVersionUpdate {
	pvu.mutation.Where(ps...)
	return pvu
}

// SetUpdatedAt sets the "updated_at" field.
func (pvu *PluginVersionUpdate) SetUpdatedAt(t time.Time) *PluginVersionUpdate {
	pvu.mutation.SetUpdatedAt(t)
	return pvu
}

// SetDeletedAt sets the "deleted_at" field.
func (pvu *PluginVersionUpdate) SetDeletedAt(t time.Time) *PluginVersionUpdate {
	pvu.mutation.SetDeletedAt(t)
	return pvu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pvu *PluginVersionUpdate) SetNillableDeletedAt(t *time.Time) *PluginVersionUpdate {
	if t != nil {
		pvu.SetDeletedAt(*t)
	}
	return pvu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pvu *PluginVersionUpdate) ClearDeletedAt() *PluginVersionUpdate {
	pvu.mutation.ClearDeletedAt()
	return pvu
}

// SetVersion sets the "version" field.
func (pvu *PluginVersionUpdate) SetVersion(s string) *PluginVersionUpdate {
	pvu.mutation.SetVersion(s)
	return pvu
}

// SetDescription sets the "description" field.
func (pvu *PluginVersionUpdate) SetDescription(s string) *PluginVersionUpdate {
	pvu.mutation.SetDescription(s)
	return pvu
}

// SetBroken sets the "broken" field.
func (pvu *PluginVersionUpdate) SetBroken(b bool) *PluginVersionUpdate {
	pvu.mutation.SetBroken(b)
	return pvu
}

// SetPluginID sets the "plugin" edge to the Plugin entity by ID.
func (pvu *PluginVersionUpdate) SetPluginID(id uuid.UUID) *PluginVersionUpdate {
	pvu.mutation.SetPluginID(id)
	return pvu
}

// SetPlugin sets the "plugin" edge to the Plugin entity.
func (pvu *PluginVersionUpdate) SetPlugin(p *Plugin) *PluginVersionUpdate {
	return pvu.SetPluginID(p.ID)
}

// Mutation returns the PluginVersionMutation object of the builder.
func (pvu *PluginVersionUpdate) Mutation() *PluginVersionMutation {
	return pvu.mutation
}

// ClearPlugin clears the "plugin" edge to the Plugin entity.
func (pvu *PluginVersionUpdate) ClearPlugin() *PluginVersionUpdate {
	pvu.mutation.ClearPlugin()
	return pvu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pvu *PluginVersionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pvu.defaults()
	if len(pvu.hooks) == 0 {
		if err = pvu.check(); err != nil {
			return 0, err
		}
		affected, err = pvu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PluginVersionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pvu.check(); err != nil {
				return 0, err
			}
			pvu.mutation = mutation
			affected, err = pvu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pvu.hooks) - 1; i >= 0; i-- {
			if pvu.hooks[i] == nil {
				return 0, fmt.Errorf("db: uninitialized hook (forgotten import db/runtime?)")
			}
			mut = pvu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pvu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pvu *PluginVersionUpdate) SaveX(ctx context.Context) int {
	affected, err := pvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pvu *PluginVersionUpdate) Exec(ctx context.Context) error {
	_, err := pvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvu *PluginVersionUpdate) ExecX(ctx context.Context) {
	if err := pvu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pvu *PluginVersionUpdate) defaults() {
	if _, ok := pvu.mutation.UpdatedAt(); !ok {
		v := pluginversion.UpdateDefaultUpdatedAt()
		pvu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pvu *PluginVersionUpdate) check() error {
	if v, ok := pvu.mutation.Description(); ok {
		if err := pluginversion.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`db: validator failed for field "PluginVersion.description": %w`, err)}
		}
	}
	if _, ok := pvu.mutation.PluginID(); pvu.mutation.PluginCleared() && !ok {
		return errors.New(`db: clearing a required unique edge "PluginVersion.plugin"`)
	}
	return nil
}

func (pvu *PluginVersionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pluginversion.Table,
			Columns: pluginversion.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: pluginversion.FieldID,
			},
		},
	}
	if ps := pvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pvu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pluginversion.FieldUpdatedAt,
		})
	}
	if value, ok := pvu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pluginversion.FieldDeletedAt,
		})
	}
	if pvu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: pluginversion.FieldDeletedAt,
		})
	}
	if value, ok := pvu.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pluginversion.FieldVersion,
		})
	}
	if value, ok := pvu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pluginversion.FieldDescription,
		})
	}
	if value, ok := pvu.mutation.Broken(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: pluginversion.FieldBroken,
		})
	}
	if pvu.mutation.PluginCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pluginversion.PluginTable,
			Columns: []string{pluginversion.PluginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plugin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvu.mutation.PluginIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pluginversion.PluginTable,
			Columns: []string{pluginversion.PluginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plugin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pluginversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// PluginVersionUpdateOne is the builder for updating a single PluginVersion entity.
type PluginVersionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PluginVersionMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (pvuo *PluginVersionUpdateOne) SetUpdatedAt(t time.Time) *PluginVersionUpdateOne {
	pvuo.mutation.SetUpdatedAt(t)
	return pvuo
}

// SetDeletedAt sets the "deleted_at" field.
func (pvuo *PluginVersionUpdateOne) SetDeletedAt(t time.Time) *PluginVersionUpdateOne {
	pvuo.mutation.SetDeletedAt(t)
	return pvuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pvuo *PluginVersionUpdateOne) SetNillableDeletedAt(t *time.Time) *PluginVersionUpdateOne {
	if t != nil {
		pvuo.SetDeletedAt(*t)
	}
	return pvuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pvuo *PluginVersionUpdateOne) ClearDeletedAt() *PluginVersionUpdateOne {
	pvuo.mutation.ClearDeletedAt()
	return pvuo
}

// SetVersion sets the "version" field.
func (pvuo *PluginVersionUpdateOne) SetVersion(s string) *PluginVersionUpdateOne {
	pvuo.mutation.SetVersion(s)
	return pvuo
}

// SetDescription sets the "description" field.
func (pvuo *PluginVersionUpdateOne) SetDescription(s string) *PluginVersionUpdateOne {
	pvuo.mutation.SetDescription(s)
	return pvuo
}

// SetBroken sets the "broken" field.
func (pvuo *PluginVersionUpdateOne) SetBroken(b bool) *PluginVersionUpdateOne {
	pvuo.mutation.SetBroken(b)
	return pvuo
}

// SetPluginID sets the "plugin" edge to the Plugin entity by ID.
func (pvuo *PluginVersionUpdateOne) SetPluginID(id uuid.UUID) *PluginVersionUpdateOne {
	pvuo.mutation.SetPluginID(id)
	return pvuo
}

// SetPlugin sets the "plugin" edge to the Plugin entity.
func (pvuo *PluginVersionUpdateOne) SetPlugin(p *Plugin) *PluginVersionUpdateOne {
	return pvuo.SetPluginID(p.ID)
}

// Mutation returns the PluginVersionMutation object of the builder.
func (pvuo *PluginVersionUpdateOne) Mutation() *PluginVersionMutation {
	return pvuo.mutation
}

// ClearPlugin clears the "plugin" edge to the Plugin entity.
func (pvuo *PluginVersionUpdateOne) ClearPlugin() *PluginVersionUpdateOne {
	pvuo.mutation.ClearPlugin()
	return pvuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pvuo *PluginVersionUpdateOne) Select(field string, fields ...string) *PluginVersionUpdateOne {
	pvuo.fields = append([]string{field}, fields...)
	return pvuo
}

// Save executes the query and returns the updated PluginVersion entity.
func (pvuo *PluginVersionUpdateOne) Save(ctx context.Context) (*PluginVersion, error) {
	var (
		err  error
		node *PluginVersion
	)
	pvuo.defaults()
	if len(pvuo.hooks) == 0 {
		if err = pvuo.check(); err != nil {
			return nil, err
		}
		node, err = pvuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PluginVersionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pvuo.check(); err != nil {
				return nil, err
			}
			pvuo.mutation = mutation
			node, err = pvuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pvuo.hooks) - 1; i >= 0; i-- {
			if pvuo.hooks[i] == nil {
				return nil, fmt.Errorf("db: uninitialized hook (forgotten import db/runtime?)")
			}
			mut = pvuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pvuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pvuo *PluginVersionUpdateOne) SaveX(ctx context.Context) *PluginVersion {
	node, err := pvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pvuo *PluginVersionUpdateOne) Exec(ctx context.Context) error {
	_, err := pvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvuo *PluginVersionUpdateOne) ExecX(ctx context.Context) {
	if err := pvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pvuo *PluginVersionUpdateOne) defaults() {
	if _, ok := pvuo.mutation.UpdatedAt(); !ok {
		v := pluginversion.UpdateDefaultUpdatedAt()
		pvuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pvuo *PluginVersionUpdateOne) check() error {
	if v, ok := pvuo.mutation.Description(); ok {
		if err := pluginversion.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`db: validator failed for field "PluginVersion.description": %w`, err)}
		}
	}
	if _, ok := pvuo.mutation.PluginID(); pvuo.mutation.PluginCleared() && !ok {
		return errors.New(`db: clearing a required unique edge "PluginVersion.plugin"`)
	}
	return nil
}

func (pvuo *PluginVersionUpdateOne) sqlSave(ctx context.Context) (_node *PluginVersion, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pluginversion.Table,
			Columns: pluginversion.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: pluginversion.FieldID,
			},
		},
	}
	id, ok := pvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "PluginVersion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pluginversion.FieldID)
		for _, f := range fields {
			if !pluginversion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != pluginversion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pvuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pluginversion.FieldUpdatedAt,
		})
	}
	if value, ok := pvuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pluginversion.FieldDeletedAt,
		})
	}
	if pvuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: pluginversion.FieldDeletedAt,
		})
	}
	if value, ok := pvuo.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pluginversion.FieldVersion,
		})
	}
	if value, ok := pvuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pluginversion.FieldDescription,
		})
	}
	if value, ok := pvuo.mutation.Broken(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: pluginversion.FieldBroken,
		})
	}
	if pvuo.mutation.PluginCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pluginversion.PluginTable,
			Columns: []string{pluginversion.PluginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plugin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvuo.mutation.PluginIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pluginversion.PluginTable,
			Columns: []string{pluginversion.PluginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plugin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PluginVersion{config: pvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pluginversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
