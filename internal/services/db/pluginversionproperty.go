// Code generated by entc, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/khorevaa/r2gitsync/internal/services/db/plugin"
	"github.com/khorevaa/r2gitsync/internal/services/db/pluginversion"
	"github.com/khorevaa/r2gitsync/internal/services/db/pluginversionproperty"
)

// PluginVersionProperty is the model entity for the PluginVersionProperty schema.
type PluginVersionProperty struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Default holds the value of the "default" field.
	Default string `json:"default,omitempty"`
	// Required holds the value of the "required" field.
	Required bool `json:"required,omitempty"`
	// Type holds the value of the "type" field.
	Type pluginversionproperty.Type `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PluginVersionPropertyQuery when eager-loading is set.
	Edges                           PluginVersionPropertyEdges `json:"edges"`
	plugin_version_property_plugin  *uuid.UUID
	plugin_version_property_version *uuid.UUID
}

// PluginVersionPropertyEdges holds the relations/edges for other nodes in the graph.
type PluginVersionPropertyEdges struct {
	// Plugin holds the value of the plugin edge.
	Plugin *Plugin `json:"plugin,omitempty"`
	// Version holds the value of the version edge.
	Version *PluginVersion `json:"version,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PluginOrErr returns the Plugin value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PluginVersionPropertyEdges) PluginOrErr() (*Plugin, error) {
	if e.loadedTypes[0] {
		if e.Plugin == nil {
			// The edge plugin was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: plugin.Label}
		}
		return e.Plugin, nil
	}
	return nil, &NotLoadedError{edge: "plugin"}
}

// VersionOrErr returns the Version value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PluginVersionPropertyEdges) VersionOrErr() (*PluginVersion, error) {
	if e.loadedTypes[1] {
		if e.Version == nil {
			// The edge version was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: pluginversion.Label}
		}
		return e.Version, nil
	}
	return nil, &NotLoadedError{edge: "version"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PluginVersionProperty) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case pluginversionproperty.FieldRequired:
			values[i] = new(sql.NullBool)
		case pluginversionproperty.FieldName, pluginversionproperty.FieldDefault, pluginversionproperty.FieldType:
			values[i] = new(sql.NullString)
		case pluginversionproperty.FieldCreatedAt, pluginversionproperty.FieldUpdatedAt, pluginversionproperty.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case pluginversionproperty.FieldID:
			values[i] = new(uuid.UUID)
		case pluginversionproperty.ForeignKeys[0]: // plugin_version_property_plugin
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case pluginversionproperty.ForeignKeys[1]: // plugin_version_property_version
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type PluginVersionProperty", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PluginVersionProperty fields.
func (pvp *PluginVersionProperty) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pluginversionproperty.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pvp.ID = *value
			}
		case pluginversionproperty.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pvp.CreatedAt = value.Time
			}
		case pluginversionproperty.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pvp.UpdatedAt = value.Time
			}
		case pluginversionproperty.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pvp.DeletedAt = new(time.Time)
				*pvp.DeletedAt = value.Time
			}
		case pluginversionproperty.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pvp.Name = value.String
			}
		case pluginversionproperty.FieldDefault:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field default", values[i])
			} else if value.Valid {
				pvp.Default = value.String
			}
		case pluginversionproperty.FieldRequired:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field required", values[i])
			} else if value.Valid {
				pvp.Required = value.Bool
			}
		case pluginversionproperty.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				pvp.Type = pluginversionproperty.Type(value.String)
			}
		case pluginversionproperty.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field plugin_version_property_plugin", values[i])
			} else if value.Valid {
				pvp.plugin_version_property_plugin = new(uuid.UUID)
				*pvp.plugin_version_property_plugin = *value.S.(*uuid.UUID)
			}
		case pluginversionproperty.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field plugin_version_property_version", values[i])
			} else if value.Valid {
				pvp.plugin_version_property_version = new(uuid.UUID)
				*pvp.plugin_version_property_version = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryPlugin queries the "plugin" edge of the PluginVersionProperty entity.
func (pvp *PluginVersionProperty) QueryPlugin() *PluginQuery {
	return (&PluginVersionPropertyClient{config: pvp.config}).QueryPlugin(pvp)
}

// QueryVersion queries the "version" edge of the PluginVersionProperty entity.
func (pvp *PluginVersionProperty) QueryVersion() *PluginVersionQuery {
	return (&PluginVersionPropertyClient{config: pvp.config}).QueryVersion(pvp)
}

// Update returns a builder for updating this PluginVersionProperty.
// Note that you need to call PluginVersionProperty.Unwrap() before calling this method if this PluginVersionProperty
// was returned from a transaction, and the transaction was committed or rolled back.
func (pvp *PluginVersionProperty) Update() *PluginVersionPropertyUpdateOne {
	return (&PluginVersionPropertyClient{config: pvp.config}).UpdateOne(pvp)
}

// Unwrap unwraps the PluginVersionProperty entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pvp *PluginVersionProperty) Unwrap() *PluginVersionProperty {
	tx, ok := pvp.config.driver.(*txDriver)
	if !ok {
		panic("db: PluginVersionProperty is not a transactional entity")
	}
	pvp.config.driver = tx.drv
	return pvp
}

// String implements the fmt.Stringer.
func (pvp *PluginVersionProperty) String() string {
	var builder strings.Builder
	builder.WriteString("PluginVersionProperty(")
	builder.WriteString(fmt.Sprintf("id=%v", pvp.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(pvp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(pvp.UpdatedAt.Format(time.ANSIC))
	if v := pvp.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", name=")
	builder.WriteString(pvp.Name)
	builder.WriteString(", default=")
	builder.WriteString(pvp.Default)
	builder.WriteString(", required=")
	builder.WriteString(fmt.Sprintf("%v", pvp.Required))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", pvp.Type))
	builder.WriteByte(')')
	return builder.String()
}

// PluginVersionProperties is a parsable slice of PluginVersionProperty.
type PluginVersionProperties []*PluginVersionProperty

func (pvp PluginVersionProperties) config(cfg config) {
	for _i := range pvp {
		pvp[_i].config = cfg
	}
}
