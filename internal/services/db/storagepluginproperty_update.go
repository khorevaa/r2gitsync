// Code generated by entc, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/khorevaa/r2gitsync/internal/services/db/predicate"
	"github.com/khorevaa/r2gitsync/internal/services/db/storageplugin"
	"github.com/khorevaa/r2gitsync/internal/services/db/storagepluginproperty"
)

// StoragePluginPropertyUpdate is the builder for updating StoragePluginProperty entities.
type StoragePluginPropertyUpdate struct {
	config
	hooks    []Hook
	mutation *StoragePluginPropertyMutation
}

// Where appends a list predicates to the StoragePluginPropertyUpdate builder.
func (sppu *StoragePluginPropertyUpdate) Where(ps ...predicate.StoragePluginProperty) *StoragePluginPropertyUpdate {
	sppu.mutation.Where(ps...)
	return sppu
}

// SetUpdatedAt sets the "updated_at" field.
func (sppu *StoragePluginPropertyUpdate) SetUpdatedAt(t time.Time) *StoragePluginPropertyUpdate {
	sppu.mutation.SetUpdatedAt(t)
	return sppu
}

// SetDeletedAt sets the "deleted_at" field.
func (sppu *StoragePluginPropertyUpdate) SetDeletedAt(t time.Time) *StoragePluginPropertyUpdate {
	sppu.mutation.SetDeletedAt(t)
	return sppu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sppu *StoragePluginPropertyUpdate) SetNillableDeletedAt(t *time.Time) *StoragePluginPropertyUpdate {
	if t != nil {
		sppu.SetDeletedAt(*t)
	}
	return sppu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (sppu *StoragePluginPropertyUpdate) ClearDeletedAt() *StoragePluginPropertyUpdate {
	sppu.mutation.ClearDeletedAt()
	return sppu
}

// SetName sets the "name" field.
func (sppu *StoragePluginPropertyUpdate) SetName(s string) *StoragePluginPropertyUpdate {
	sppu.mutation.SetName(s)
	return sppu
}

// SetValue sets the "value" field.
func (sppu *StoragePluginPropertyUpdate) SetValue(s string) *StoragePluginPropertyUpdate {
	sppu.mutation.SetValue(s)
	return sppu
}

// SetPluginID sets the "plugin" edge to the StoragePlugin entity by ID.
func (sppu *StoragePluginPropertyUpdate) SetPluginID(id uuid.UUID) *StoragePluginPropertyUpdate {
	sppu.mutation.SetPluginID(id)
	return sppu
}

// SetPlugin sets the "plugin" edge to the StoragePlugin entity.
func (sppu *StoragePluginPropertyUpdate) SetPlugin(s *StoragePlugin) *StoragePluginPropertyUpdate {
	return sppu.SetPluginID(s.ID)
}

// Mutation returns the StoragePluginPropertyMutation object of the builder.
func (sppu *StoragePluginPropertyUpdate) Mutation() *StoragePluginPropertyMutation {
	return sppu.mutation
}

// ClearPlugin clears the "plugin" edge to the StoragePlugin entity.
func (sppu *StoragePluginPropertyUpdate) ClearPlugin() *StoragePluginPropertyUpdate {
	sppu.mutation.ClearPlugin()
	return sppu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sppu *StoragePluginPropertyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	sppu.defaults()
	if len(sppu.hooks) == 0 {
		if err = sppu.check(); err != nil {
			return 0, err
		}
		affected, err = sppu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StoragePluginPropertyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sppu.check(); err != nil {
				return 0, err
			}
			sppu.mutation = mutation
			affected, err = sppu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(sppu.hooks) - 1; i >= 0; i-- {
			if sppu.hooks[i] == nil {
				return 0, fmt.Errorf("db: uninitialized hook (forgotten import db/runtime?)")
			}
			mut = sppu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sppu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (sppu *StoragePluginPropertyUpdate) SaveX(ctx context.Context) int {
	affected, err := sppu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sppu *StoragePluginPropertyUpdate) Exec(ctx context.Context) error {
	_, err := sppu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sppu *StoragePluginPropertyUpdate) ExecX(ctx context.Context) {
	if err := sppu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sppu *StoragePluginPropertyUpdate) defaults() {
	if _, ok := sppu.mutation.UpdatedAt(); !ok {
		v := storagepluginproperty.UpdateDefaultUpdatedAt()
		sppu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sppu *StoragePluginPropertyUpdate) check() error {
	if _, ok := sppu.mutation.PluginID(); sppu.mutation.PluginCleared() && !ok {
		return errors.New(`db: clearing a required unique edge "StoragePluginProperty.plugin"`)
	}
	return nil
}

func (sppu *StoragePluginPropertyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   storagepluginproperty.Table,
			Columns: storagepluginproperty.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: storagepluginproperty.FieldID,
			},
		},
	}
	if ps := sppu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sppu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: storagepluginproperty.FieldUpdatedAt,
		})
	}
	if value, ok := sppu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: storagepluginproperty.FieldDeletedAt,
		})
	}
	if sppu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: storagepluginproperty.FieldDeletedAt,
		})
	}
	if value, ok := sppu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: storagepluginproperty.FieldName,
		})
	}
	if value, ok := sppu.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: storagepluginproperty.FieldValue,
		})
	}
	if sppu.mutation.PluginCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   storagepluginproperty.PluginTable,
			Columns: []string{storagepluginproperty.PluginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: storageplugin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sppu.mutation.PluginIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   storagepluginproperty.PluginTable,
			Columns: []string{storagepluginproperty.PluginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: storageplugin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sppu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{storagepluginproperty.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// StoragePluginPropertyUpdateOne is the builder for updating a single StoragePluginProperty entity.
type StoragePluginPropertyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StoragePluginPropertyMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (sppuo *StoragePluginPropertyUpdateOne) SetUpdatedAt(t time.Time) *StoragePluginPropertyUpdateOne {
	sppuo.mutation.SetUpdatedAt(t)
	return sppuo
}

// SetDeletedAt sets the "deleted_at" field.
func (sppuo *StoragePluginPropertyUpdateOne) SetDeletedAt(t time.Time) *StoragePluginPropertyUpdateOne {
	sppuo.mutation.SetDeletedAt(t)
	return sppuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sppuo *StoragePluginPropertyUpdateOne) SetNillableDeletedAt(t *time.Time) *StoragePluginPropertyUpdateOne {
	if t != nil {
		sppuo.SetDeletedAt(*t)
	}
	return sppuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (sppuo *StoragePluginPropertyUpdateOne) ClearDeletedAt() *StoragePluginPropertyUpdateOne {
	sppuo.mutation.ClearDeletedAt()
	return sppuo
}

// SetName sets the "name" field.
func (sppuo *StoragePluginPropertyUpdateOne) SetName(s string) *StoragePluginPropertyUpdateOne {
	sppuo.mutation.SetName(s)
	return sppuo
}

// SetValue sets the "value" field.
func (sppuo *StoragePluginPropertyUpdateOne) SetValue(s string) *StoragePluginPropertyUpdateOne {
	sppuo.mutation.SetValue(s)
	return sppuo
}

// SetPluginID sets the "plugin" edge to the StoragePlugin entity by ID.
func (sppuo *StoragePluginPropertyUpdateOne) SetPluginID(id uuid.UUID) *StoragePluginPropertyUpdateOne {
	sppuo.mutation.SetPluginID(id)
	return sppuo
}

// SetPlugin sets the "plugin" edge to the StoragePlugin entity.
func (sppuo *StoragePluginPropertyUpdateOne) SetPlugin(s *StoragePlugin) *StoragePluginPropertyUpdateOne {
	return sppuo.SetPluginID(s.ID)
}

// Mutation returns the StoragePluginPropertyMutation object of the builder.
func (sppuo *StoragePluginPropertyUpdateOne) Mutation() *StoragePluginPropertyMutation {
	return sppuo.mutation
}

// ClearPlugin clears the "plugin" edge to the StoragePlugin entity.
func (sppuo *StoragePluginPropertyUpdateOne) ClearPlugin() *StoragePluginPropertyUpdateOne {
	sppuo.mutation.ClearPlugin()
	return sppuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sppuo *StoragePluginPropertyUpdateOne) Select(field string, fields ...string) *StoragePluginPropertyUpdateOne {
	sppuo.fields = append([]string{field}, fields...)
	return sppuo
}

// Save executes the query and returns the updated StoragePluginProperty entity.
func (sppuo *StoragePluginPropertyUpdateOne) Save(ctx context.Context) (*StoragePluginProperty, error) {
	var (
		err  error
		node *StoragePluginProperty
	)
	sppuo.defaults()
	if len(sppuo.hooks) == 0 {
		if err = sppuo.check(); err != nil {
			return nil, err
		}
		node, err = sppuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StoragePluginPropertyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sppuo.check(); err != nil {
				return nil, err
			}
			sppuo.mutation = mutation
			node, err = sppuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sppuo.hooks) - 1; i >= 0; i-- {
			if sppuo.hooks[i] == nil {
				return nil, fmt.Errorf("db: uninitialized hook (forgotten import db/runtime?)")
			}
			mut = sppuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sppuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (sppuo *StoragePluginPropertyUpdateOne) SaveX(ctx context.Context) *StoragePluginProperty {
	node, err := sppuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sppuo *StoragePluginPropertyUpdateOne) Exec(ctx context.Context) error {
	_, err := sppuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sppuo *StoragePluginPropertyUpdateOne) ExecX(ctx context.Context) {
	if err := sppuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sppuo *StoragePluginPropertyUpdateOne) defaults() {
	if _, ok := sppuo.mutation.UpdatedAt(); !ok {
		v := storagepluginproperty.UpdateDefaultUpdatedAt()
		sppuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sppuo *StoragePluginPropertyUpdateOne) check() error {
	if _, ok := sppuo.mutation.PluginID(); sppuo.mutation.PluginCleared() && !ok {
		return errors.New(`db: clearing a required unique edge "StoragePluginProperty.plugin"`)
	}
	return nil
}

func (sppuo *StoragePluginPropertyUpdateOne) sqlSave(ctx context.Context) (_node *StoragePluginProperty, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   storagepluginproperty.Table,
			Columns: storagepluginproperty.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: storagepluginproperty.FieldID,
			},
		},
	}
	id, ok := sppuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "StoragePluginProperty.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sppuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, storagepluginproperty.FieldID)
		for _, f := range fields {
			if !storagepluginproperty.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != storagepluginproperty.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sppuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sppuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: storagepluginproperty.FieldUpdatedAt,
		})
	}
	if value, ok := sppuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: storagepluginproperty.FieldDeletedAt,
		})
	}
	if sppuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: storagepluginproperty.FieldDeletedAt,
		})
	}
	if value, ok := sppuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: storagepluginproperty.FieldName,
		})
	}
	if value, ok := sppuo.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: storagepluginproperty.FieldValue,
		})
	}
	if sppuo.mutation.PluginCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   storagepluginproperty.PluginTable,
			Columns: []string{storagepluginproperty.PluginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: storageplugin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sppuo.mutation.PluginIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   storagepluginproperty.PluginTable,
			Columns: []string{storagepluginproperty.PluginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: storageplugin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &StoragePluginProperty{config: sppuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sppuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{storagepluginproperty.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
