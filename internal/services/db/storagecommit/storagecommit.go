// Code generated by entc, DO NOT EDIT.

package storagecommit

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the storagecommit type in the database.
	Label = "storage_commit"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldNumber holds the string denoting the number field in the database.
	FieldNumber = "number"
	// FieldConfigurationVersion holds the string denoting the configuration_version field in the database.
	FieldConfigurationVersion = "configuration_version"
	// FieldAuthor holds the string denoting the author field in the database.
	FieldAuthor = "author"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldTag holds the string denoting the tag field in the database.
	FieldTag = "tag"
	// FieldTagDescription holds the string denoting the tag_description field in the database.
	FieldTagDescription = "tag_description"
	// FieldCommitAt holds the string denoting the commit_at field in the database.
	FieldCommitAt = "commit_at"
	// EdgeStorage holds the string denoting the storage edge name in mutations.
	EdgeStorage = "storage"
	// Table holds the table name of the storagecommit in the database.
	Table = "storage_commits"
	// StorageTable is the table that holds the storage relation/edge.
	StorageTable = "storage_commits"
	// StorageInverseTable is the table name for the Storage entity.
	// It exists in this package in order to avoid circular dependency with the "storage" package.
	StorageInverseTable = "storages"
	// StorageColumn is the table column denoting the storage relation/edge.
	StorageColumn = "storage_commit_storage"
)

// Columns holds all SQL columns for storagecommit fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldNumber,
	FieldConfigurationVersion,
	FieldAuthor,
	FieldDescription,
	FieldTag,
	FieldTagDescription,
	FieldCommitAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "storage_commits"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"storage_commit_storage",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// NumberValidator is a validator for the "number" field. It is called by the builders before save.
	NumberValidator func(uint) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
