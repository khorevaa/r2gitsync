// Code generated by entc, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/khorevaa/r2gitsync/internal/services/db/storage"
	"github.com/khorevaa/r2gitsync/internal/services/db/storagecommit"
)

// StorageCommit is the model entity for the StorageCommit schema.
type StorageCommit struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Number holds the value of the "number" field.
	Number uint `json:"number,omitempty"`
	// ConfigurationVersion holds the value of the "configuration_version" field.
	ConfigurationVersion string `json:"configuration_version,omitempty"`
	// Author holds the value of the "author" field.
	Author string `json:"author,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Tag holds the value of the "tag" field.
	Tag string `json:"tag,omitempty"`
	// TagDescription holds the value of the "tag_description" field.
	TagDescription string `json:"tag_description,omitempty"`
	// CommitAt holds the value of the "commit_at" field.
	CommitAt time.Time `json:"commit_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StorageCommitQuery when eager-loading is set.
	Edges                  StorageCommitEdges `json:"edges"`
	storage_commit_storage *uuid.UUID
}

// StorageCommitEdges holds the relations/edges for other nodes in the graph.
type StorageCommitEdges struct {
	// Storage holds the value of the storage edge.
	Storage *Storage `json:"storage,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// StorageOrErr returns the Storage value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StorageCommitEdges) StorageOrErr() (*Storage, error) {
	if e.loadedTypes[0] {
		if e.Storage == nil {
			// The edge storage was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: storage.Label}
		}
		return e.Storage, nil
	}
	return nil, &NotLoadedError{edge: "storage"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StorageCommit) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case storagecommit.FieldNumber:
			values[i] = new(sql.NullInt64)
		case storagecommit.FieldConfigurationVersion, storagecommit.FieldAuthor, storagecommit.FieldDescription, storagecommit.FieldTag, storagecommit.FieldTagDescription:
			values[i] = new(sql.NullString)
		case storagecommit.FieldCreatedAt, storagecommit.FieldUpdatedAt, storagecommit.FieldDeletedAt, storagecommit.FieldCommitAt:
			values[i] = new(sql.NullTime)
		case storagecommit.FieldID:
			values[i] = new(uuid.UUID)
		case storagecommit.ForeignKeys[0]: // storage_commit_storage
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type StorageCommit", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StorageCommit fields.
func (sc *StorageCommit) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case storagecommit.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				sc.ID = *value
			}
		case storagecommit.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sc.CreatedAt = value.Time
			}
		case storagecommit.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sc.UpdatedAt = value.Time
			}
		case storagecommit.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				sc.DeletedAt = new(time.Time)
				*sc.DeletedAt = value.Time
			}
		case storagecommit.FieldNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field number", values[i])
			} else if value.Valid {
				sc.Number = uint(value.Int64)
			}
		case storagecommit.FieldConfigurationVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field configuration_version", values[i])
			} else if value.Valid {
				sc.ConfigurationVersion = value.String
			}
		case storagecommit.FieldAuthor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field author", values[i])
			} else if value.Valid {
				sc.Author = value.String
			}
		case storagecommit.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				sc.Description = value.String
			}
		case storagecommit.FieldTag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tag", values[i])
			} else if value.Valid {
				sc.Tag = value.String
			}
		case storagecommit.FieldTagDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tag_description", values[i])
			} else if value.Valid {
				sc.TagDescription = value.String
			}
		case storagecommit.FieldCommitAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field commit_at", values[i])
			} else if value.Valid {
				sc.CommitAt = value.Time
			}
		case storagecommit.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field storage_commit_storage", values[i])
			} else if value.Valid {
				sc.storage_commit_storage = new(uuid.UUID)
				*sc.storage_commit_storage = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryStorage queries the "storage" edge of the StorageCommit entity.
func (sc *StorageCommit) QueryStorage() *StorageQuery {
	return (&StorageCommitClient{config: sc.config}).QueryStorage(sc)
}

// Update returns a builder for updating this StorageCommit.
// Note that you need to call StorageCommit.Unwrap() before calling this method if this StorageCommit
// was returned from a transaction, and the transaction was committed or rolled back.
func (sc *StorageCommit) Update() *StorageCommitUpdateOne {
	return (&StorageCommitClient{config: sc.config}).UpdateOne(sc)
}

// Unwrap unwraps the StorageCommit entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sc *StorageCommit) Unwrap() *StorageCommit {
	tx, ok := sc.config.driver.(*txDriver)
	if !ok {
		panic("db: StorageCommit is not a transactional entity")
	}
	sc.config.driver = tx.drv
	return sc
}

// String implements the fmt.Stringer.
func (sc *StorageCommit) String() string {
	var builder strings.Builder
	builder.WriteString("StorageCommit(")
	builder.WriteString(fmt.Sprintf("id=%v", sc.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(sc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(sc.UpdatedAt.Format(time.ANSIC))
	if v := sc.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", number=")
	builder.WriteString(fmt.Sprintf("%v", sc.Number))
	builder.WriteString(", configuration_version=")
	builder.WriteString(sc.ConfigurationVersion)
	builder.WriteString(", author=")
	builder.WriteString(sc.Author)
	builder.WriteString(", description=")
	builder.WriteString(sc.Description)
	builder.WriteString(", tag=")
	builder.WriteString(sc.Tag)
	builder.WriteString(", tag_description=")
	builder.WriteString(sc.TagDescription)
	builder.WriteString(", commit_at=")
	builder.WriteString(sc.CommitAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// StorageCommits is a parsable slice of StorageCommit.
type StorageCommits []*StorageCommit

func (sc StorageCommits) config(cfg config) {
	for _i := range sc {
		sc[_i].config = cfg
	}
}
