// Code generated by entc, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/khorevaa/r2gitsync/internal/services/db/pluginversion"
	"github.com/khorevaa/r2gitsync/internal/services/db/storage"
	"github.com/khorevaa/r2gitsync/internal/services/db/storageplugin"
	"github.com/khorevaa/r2gitsync/internal/services/db/storagepluginproperty"
)

// StoragePluginCreate is the builder for creating a StoragePlugin entity.
type StoragePluginCreate struct {
	config
	mutation *StoragePluginMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (spc *StoragePluginCreate) SetCreatedAt(t time.Time) *StoragePluginCreate {
	spc.mutation.SetCreatedAt(t)
	return spc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (spc *StoragePluginCreate) SetNillableCreatedAt(t *time.Time) *StoragePluginCreate {
	if t != nil {
		spc.SetCreatedAt(*t)
	}
	return spc
}

// SetUpdatedAt sets the "updated_at" field.
func (spc *StoragePluginCreate) SetUpdatedAt(t time.Time) *StoragePluginCreate {
	spc.mutation.SetUpdatedAt(t)
	return spc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (spc *StoragePluginCreate) SetNillableUpdatedAt(t *time.Time) *StoragePluginCreate {
	if t != nil {
		spc.SetUpdatedAt(*t)
	}
	return spc
}

// SetDeletedAt sets the "deleted_at" field.
func (spc *StoragePluginCreate) SetDeletedAt(t time.Time) *StoragePluginCreate {
	spc.mutation.SetDeletedAt(t)
	return spc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (spc *StoragePluginCreate) SetNillableDeletedAt(t *time.Time) *StoragePluginCreate {
	if t != nil {
		spc.SetDeletedAt(*t)
	}
	return spc
}

// SetDisable sets the "disable" field.
func (spc *StoragePluginCreate) SetDisable(b bool) *StoragePluginCreate {
	spc.mutation.SetDisable(b)
	return spc
}

// SetID sets the "id" field.
func (spc *StoragePluginCreate) SetID(u uuid.UUID) *StoragePluginCreate {
	spc.mutation.SetID(u)
	return spc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (spc *StoragePluginCreate) SetNillableID(u *uuid.UUID) *StoragePluginCreate {
	if u != nil {
		spc.SetID(*u)
	}
	return spc
}

// SetStorageID sets the "storage" edge to the Storage entity by ID.
func (spc *StoragePluginCreate) SetStorageID(id uuid.UUID) *StoragePluginCreate {
	spc.mutation.SetStorageID(id)
	return spc
}

// SetStorage sets the "storage" edge to the Storage entity.
func (spc *StoragePluginCreate) SetStorage(s *Storage) *StoragePluginCreate {
	return spc.SetStorageID(s.ID)
}

// SetPluginID sets the "plugin" edge to the PluginVersion entity by ID.
func (spc *StoragePluginCreate) SetPluginID(id uuid.UUID) *StoragePluginCreate {
	spc.mutation.SetPluginID(id)
	return spc
}

// SetPlugin sets the "plugin" edge to the PluginVersion entity.
func (spc *StoragePluginCreate) SetPlugin(p *PluginVersion) *StoragePluginCreate {
	return spc.SetPluginID(p.ID)
}

// AddPropertyIDs adds the "properties" edge to the StoragePluginProperty entity by IDs.
func (spc *StoragePluginCreate) AddPropertyIDs(ids ...uuid.UUID) *StoragePluginCreate {
	spc.mutation.AddPropertyIDs(ids...)
	return spc
}

// AddProperties adds the "properties" edges to the StoragePluginProperty entity.
func (spc *StoragePluginCreate) AddProperties(s ...*StoragePluginProperty) *StoragePluginCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spc.AddPropertyIDs(ids...)
}

// Mutation returns the StoragePluginMutation object of the builder.
func (spc *StoragePluginCreate) Mutation() *StoragePluginMutation {
	return spc.mutation
}

// Save creates the StoragePlugin in the database.
func (spc *StoragePluginCreate) Save(ctx context.Context) (*StoragePlugin, error) {
	var (
		err  error
		node *StoragePlugin
	)
	spc.defaults()
	if len(spc.hooks) == 0 {
		if err = spc.check(); err != nil {
			return nil, err
		}
		node, err = spc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StoragePluginMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = spc.check(); err != nil {
				return nil, err
			}
			spc.mutation = mutation
			if node, err = spc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(spc.hooks) - 1; i >= 0; i-- {
			if spc.hooks[i] == nil {
				return nil, fmt.Errorf("db: uninitialized hook (forgotten import db/runtime?)")
			}
			mut = spc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, spc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (spc *StoragePluginCreate) SaveX(ctx context.Context) *StoragePlugin {
	v, err := spc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spc *StoragePluginCreate) Exec(ctx context.Context) error {
	_, err := spc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spc *StoragePluginCreate) ExecX(ctx context.Context) {
	if err := spc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spc *StoragePluginCreate) defaults() {
	if _, ok := spc.mutation.CreatedAt(); !ok {
		v := storageplugin.DefaultCreatedAt()
		spc.mutation.SetCreatedAt(v)
	}
	if _, ok := spc.mutation.UpdatedAt(); !ok {
		v := storageplugin.DefaultUpdatedAt()
		spc.mutation.SetUpdatedAt(v)
	}
	if _, ok := spc.mutation.ID(); !ok {
		v := storageplugin.DefaultID()
		spc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spc *StoragePluginCreate) check() error {
	if _, ok := spc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "StoragePlugin.created_at"`)}
	}
	if _, ok := spc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "StoragePlugin.updated_at"`)}
	}
	if _, ok := spc.mutation.Disable(); !ok {
		return &ValidationError{Name: "disable", err: errors.New(`db: missing required field "StoragePlugin.disable"`)}
	}
	if _, ok := spc.mutation.StorageID(); !ok {
		return &ValidationError{Name: "storage", err: errors.New(`db: missing required edge "StoragePlugin.storage"`)}
	}
	if _, ok := spc.mutation.PluginID(); !ok {
		return &ValidationError{Name: "plugin", err: errors.New(`db: missing required edge "StoragePlugin.plugin"`)}
	}
	return nil
}

func (spc *StoragePluginCreate) sqlSave(ctx context.Context) (*StoragePlugin, error) {
	_node, _spec := spc.createSpec()
	if err := sqlgraph.CreateNode(ctx, spc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (spc *StoragePluginCreate) createSpec() (*StoragePlugin, *sqlgraph.CreateSpec) {
	var (
		_node = &StoragePlugin{config: spc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: storageplugin.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: storageplugin.FieldID,
			},
		}
	)
	if id, ok := spc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := spc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: storageplugin.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := spc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: storageplugin.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := spc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: storageplugin.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := spc.mutation.Disable(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: storageplugin.FieldDisable,
		})
		_node.Disable = value
	}
	if nodes := spc.mutation.StorageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   storageplugin.StorageTable,
			Columns: []string{storageplugin.StorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: storage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.storage_plugin_storage = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := spc.mutation.PluginIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   storageplugin.PluginTable,
			Columns: []string{storageplugin.PluginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: pluginversion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.storage_plugin_plugin = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := spc.mutation.PropertiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   storageplugin.PropertiesTable,
			Columns: []string{storageplugin.PropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: storagepluginproperty.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StoragePluginCreateBulk is the builder for creating many StoragePlugin entities in bulk.
type StoragePluginCreateBulk struct {
	config
	builders []*StoragePluginCreate
}

// Save creates the StoragePlugin entities in the database.
func (spcb *StoragePluginCreateBulk) Save(ctx context.Context) ([]*StoragePlugin, error) {
	specs := make([]*sqlgraph.CreateSpec, len(spcb.builders))
	nodes := make([]*StoragePlugin, len(spcb.builders))
	mutators := make([]Mutator, len(spcb.builders))
	for i := range spcb.builders {
		func(i int, root context.Context) {
			builder := spcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StoragePluginMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, spcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, spcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, spcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (spcb *StoragePluginCreateBulk) SaveX(ctx context.Context) []*StoragePlugin {
	v, err := spcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spcb *StoragePluginCreateBulk) Exec(ctx context.Context) error {
	_, err := spcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spcb *StoragePluginCreateBulk) ExecX(ctx context.Context) {
	if err := spcb.Exec(ctx); err != nil {
		panic(err)
	}
}
